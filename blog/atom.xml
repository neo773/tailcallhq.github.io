<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tailcall.run/blog/</id>
    <title>Blog title</title>
    <updated>2024-07-12T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tailcall.run/blog/"/>
    <subtitle>Blog</subtitle>
    <icon>https://tailcall.run/images/favicon.ico</icon>
    <rights>Copyright © 2024 Tailcall, Inc.</rights>
    <entry>
        <title type="html"><![CDATA[Are Hackers Using Your Own GraphQL API Against You?]]></title>
        <id>https://tailcall.run/blog/graphql-introspection-security/</id>
        <link href="https://tailcall.run/blog/graphql-introspection-security/"/>
        <updated>2024-07-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how attackers exploit GraphQL introspection and the battle-tested strategies to keep your data safe.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="GraphQL Introspection Security Issues" src="https://tailcall.run/assets/images/introspection-issues-824094df2d26a55d979a573007fdc12b.png" width="1726" height="805" class="img_ev3q">
GraphQL has taken the API world by storm, offering developers a flexible and powerful way to interact with backend systems. But with great power comes great responsibility—especially when it comes to security.</p>
<p>Let's dive into one of GraphQL's most fascinating features: introspection. It's a double-edged sword that can be both a developer's best friend and a security expert's nightmare.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="understanding-graphql-introspection">Understanding GraphQL Introspection<a class="hash-link" aria-label="Direct link to Understanding GraphQL Introspection" title="Direct link to Understanding GraphQL Introspection" href="https://tailcall.run/blog/graphql-introspection-security/#understanding-graphql-introspection">​</a></h2>
<p>Imagine having a magical lens that lets you peek into the very structure of a GraphQL server. That's essentially what introspection does! It's like having a detailed map of a treasure trove, showing you every nook and cranny of the API's capabilities. This self-documenting capability is incredibly useful for developers, enabling tools like GraphiQL and GraphQL Playground to provide rich, interactive documentation and auto-completion features.</p>
<p>A basic introspection query might look like this:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token object">__schema</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token object">types</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token property" style="color:hsl(5, 74%, 59%)">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token object">fields</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token property" style="color:hsl(5, 74%, 59%)">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">          </span><span class="token property" style="color:hsl(5, 74%, 59%)">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This query asks the server to return information about all the types in the schema, including their fields and field types. The server's response provides a comprehensive map of its structure, which can be invaluable during development.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-security-implications-of-introspection">The Security Implications of Introspection<a class="hash-link" aria-label="Direct link to The Security Implications of Introspection" title="Direct link to The Security Implications of Introspection" href="https://tailcall.run/blog/graphql-introspection-security/#the-security-implications-of-introspection">​</a></h2>
<p>While introspection is a goldmine for developers, it can also be a treasure map for attackers. Let's put on our black hat for a moment and see how a malicious actor might exploit this feature.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="schema-reconnaissance">Schema Reconnaissance<a class="hash-link" aria-label="Direct link to Schema Reconnaissance" title="Direct link to Schema Reconnaissance" href="https://tailcall.run/blog/graphql-introspection-security/#schema-reconnaissance">​</a></h3>
<p>One of the primary risks of introspection is schema reconnaissance. An attacker who gains access to a GraphQL endpoint can use introspection to explore the schema and identify potential targets for further attacks. This includes discovering sensitive types and fields, as well as understanding the relationships between different parts of the schema. Armed with this knowledge, an attacker can craft more effective queries to exploit vulnerabilities in the system.</p>
<p>For instance, an attacker might discover a 'User' type with fields like 'email', 'password', and 'isAdmin'. They could then craft a query to exploit this:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">query</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token object">allUsers</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token property" style="color:hsl(5, 74%, 59%)">email</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token property" style="color:hsl(5, 74%, 59%)">password</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token property" style="color:hsl(5, 74%, 59%)">isAdmin</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If not properly secured, this query could potentially expose sensitive user data. The attacker might also notice an 'updateUser' mutation, which could be a target for privilege escalation attempts.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="information-disclosure">Information Disclosure<a class="hash-link" aria-label="Direct link to Information Disclosure" title="Direct link to Information Disclosure" href="https://tailcall.run/blog/graphql-introspection-security/#information-disclosure">​</a></h3>
<p>Another significant risk is information disclosure. The introspection feature can inadvertently reveal implementation details that should remain hidden. This includes internal types, deprecated fields, and administrative functionalities. Such exposure can give attackers clues about the underlying system architecture and any potential weaknesses.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="attack-surface-expansion">Attack Surface Expansion<a class="hash-link" aria-label="Direct link to Attack Surface Expansion" title="Direct link to Attack Surface Expansion" href="https://tailcall.run/blog/graphql-introspection-security/#attack-surface-expansion">​</a></h3>
<p>By using introspection, attackers can significantly expand their attack surface. They can identify entry points for various attacks, including SQL injection, cross-site scripting (XSS), and denial of service (DoS) attacks. For instance, if introspection reveals that certain fields accept user input, an attacker might probe these fields for injection vulnerabilities.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="mitigating-introspection-risks">Mitigating Introspection Risks<a class="hash-link" aria-label="Direct link to Mitigating Introspection Risks" title="Direct link to Mitigating Introspection Risks" href="https://tailcall.run/blog/graphql-introspection-security/#mitigating-introspection-risks">​</a></h2>
<p>Now, let's switch gears and become the defenders of our GraphQL realm. Here are some battle-tested strategies to keep your API safe from prying eyes:</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="disable-introspection-in-production">Disable Introspection in Production<a class="hash-link" aria-label="Direct link to Disable Introspection in Production" title="Direct link to Disable Introspection in Production" href="https://tailcall.run/blog/graphql-introspection-security/#disable-introspection-in-production">​</a></h3>
<p>Disabling introspection in production is crucial because it significantly reduces the information available to potential attackers. Without introspection, they can't easily map out your API's structure or discover hidden fields and types. This forces attackers to rely on guesswork or prior knowledge, making their job much more difficult. However, it's important to note that this is not a silver bullet—determined attackers may still attempt to reverse-engineer your API through trial and error.</p>
<p>In many GraphQL implementations, disabling introspection is straightforward. For example, in <a href="https://tailcall.run/docs/tailcall-dsl-graphql-custom-directives/#introspection" target="_blank" rel="noopener noreferrer">Tailcall</a>, you can disable introspection by setting the <code>introspection</code> option to <code>false</code>:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">schema</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token directive function" style="color:hsl(221, 87%, 60%)">@server</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">introspection</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token boolean" style="color:hsl(35, 99%, 36%)">false</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">query</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Query</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">mutation</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Mutation</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This configuration ensures that introspection is disabled.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="implement-authentication-and-authorization">Implement Authentication and Authorization<a class="hash-link" aria-label="Direct link to Implement Authentication and Authorization" title="Direct link to Implement Authentication and Authorization" href="https://tailcall.run/blog/graphql-introspection-security/#implement-authentication-and-authorization">​</a></h3>
<p>Another critical measure is to implement robust authentication and authorization mechanisms. By ensuring that only authenticated and authorized users can access your GraphQL endpoint, you can reduce the risk of unauthorized introspection queries. Use industry-standard authentication protocols such as OAuth2 or JWT to secure your endpoints.</p>
<p>Imagine a GraphQL API for a banking application. You might implement role-based access control where only users with an 'ADMIN' role can access certain fields or mutations.</p>
<p>In <a href="https://tailcall.run/docs/field-level-access-control-graphql-authentication/" target="_blank" rel="noopener noreferrer">Tailcall</a>, you can achieve this by using the <code>@protected</code> directive.</p>
<p>Tailcall supports a variety of authentication and authorization mechanisms, including JWT, OAuth2, and custom authentication strategies.</p>
<p>This ensures that even if an attacker gains access to a regular user account, they can't use it to access sensitive admin-only data or operations.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="rate-limiting-and-throttling">Rate Limiting and Throttling<a class="hash-link" aria-label="Direct link to Rate Limiting and Throttling" title="Direct link to Rate Limiting and Throttling" href="https://tailcall.run/blog/graphql-introspection-security/#rate-limiting-and-throttling">​</a></h3>
<p>Rate limiting and throttling can also help mitigate the risks of introspection. By limiting the number of queries a client can execute within a given timeframe, you can reduce the likelihood of an attacker using introspection to gather information about your schema. Implementing these controls can also help protect your server from DoS attacks.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="query-allow-lists">Query Allow Lists<a class="hash-link" aria-label="Direct link to Query Allow Lists" title="Direct link to Query Allow Lists" href="https://tailcall.run/blog/graphql-introspection-security/#query-allow-lists">​</a></h3>
<p>Query allow lists work by pre-registering all valid queries that your application needs. This is typically done during the build process of your frontend application. Each query is hashed, and these hashes are stored on the server. When a query comes in, its hash is checked against the allow list.</p>
<p>For example, you might have a client-side query like this:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">query</span><span class="token plain"> </span><span class="token definition-query function" style="color:hsl(221, 87%, 60%)">GetUserProfile</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token variable" style="color:hsl(221, 87%, 60%)">$id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token property-query">user</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token variable" style="color:hsl(221, 87%, 60%)">$id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token property" style="color:hsl(5, 74%, 59%)">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token property" style="color:hsl(5, 74%, 59%)">email</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This query would be hashed and stored on the server. When executed, the server checks if the incoming query's hash matches any in its allow list. If not, it's rejected.</p>
<p>This approach is powerful because it completely prevents arbitrary queries, including introspection queries, from being executed. It does require more setup and maintenance, especially in applications where queries change frequently, but it provides a very high level of security.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="monitor-and-log-introspection-queries">Monitor and Log Introspection Queries<a class="hash-link" aria-label="Direct link to Monitor and Log Introspection Queries" title="Direct link to Monitor and Log Introspection Queries" href="https://tailcall.run/blog/graphql-introspection-security/#monitor-and-log-introspection-queries">​</a></h3>
<p>Monitoring and logging introspection queries can provide valuable insights into potential security threats. By tracking when and how introspection queries are executed, you can identify suspicious activity and respond accordingly. Implement logging at both the application and network levels to capture detailed information about each query.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="use-a-web-application-firewall-waf">Use a Web Application Firewall (WAF)<a class="hash-link" aria-label="Direct link to Use a Web Application Firewall (WAF)" title="Direct link to Use a Web Application Firewall (WAF)" href="https://tailcall.run/blog/graphql-introspection-security/#use-a-web-application-firewall-waf">​</a></h3>
<p>A WAF can be particularly effective for GraphQL APIs because it can be configured to understand GraphQL-specific threats. For instance, you can set up rules to:</p>
<ol>
<li>Limit query depth: Prevent deeply nested queries that could overload your server.</li>
<li>Restrict field counts: Avoid overly broad queries that request too many fields at once.</li>
<li>Block known malicious patterns: Such as attempts to inject malicious code into queries.</li>
</ol>
<p>For example, a WAF rule might look like this:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">SecRule ARGS_POST:query "@contains __schema" \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    "id:1000,\</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    phase:2,\</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    t:none,\</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    block,\</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    msg:'GraphQL introspection query detected'"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This rule would block any POST request containing '__schema' in the query parameter, which is typically indicative of an introspection query.</p>
<p>By implementing these kinds of rules, a WAF adds an extra layer of protection, catching many potential attacks before they even reach your GraphQL server.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://tailcall.run/blog/graphql-introspection-security/#conclusion">​</a></h2>
<p>Securing GraphQL is like playing a high-stakes game of chess. You need to think several moves ahead, anticipating potential threats while leveraging the strengths of your position. By implementing these strategies, you're not just protecting your API—you're ensuring that GraphQL's power remains in the right hands. Stay vigilant, keep learning, and may your queries be ever secure!</p>
<p>By prioritizing security in your GraphQL implementation, you can harness the power of this modern query language while safeguarding your data and maintaining the trust of your users. Securing GraphQL is an ongoing process that requires vigilance and a proactive approach. Stay informed about the latest security developments, regularly review and update your security measures, and ensure that your development and security teams are aligned in their efforts to protect your applications.</p>]]></content>
        <author>
            <name>Amit Singh</name>
            <uri>https://github.com/amitksingh1490</uri>
        </author>
        <category label="GraphQL" term="GraphQL"/>
        <category label="Schema" term="Schema"/>
        <category label="Security" term="Security"/>
        <category label="Introspection" term="Introspection"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Design a GraphQL Schema So Good, It'll Make REST APIs Cry]]></title>
        <id>https://tailcall.run/blog/graphql-schema/</id>
        <link href="https://tailcall.run/blog/graphql-schema/"/>
        <updated>2024-07-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how to design a robust, scalable GraphQL schema. Best practices and considerations to build a schema that can evolve with your application's needs.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="GraphQL Schema Structure" src="https://tailcall.run/assets/images/graphql-schema-structure-f1dc3951cc63c1cb9fa4e07ae8cf527e.png" width="1854" height="877" class="img_ev3q"></p>
<p>Designing a robust, scalable GraphQL schema is critical for building production-ready APIs that can evolve with your application's needs. In this comprehensive guide, we'll walk through the process of crafting a GraphQL schema for a real-world application, highlighting best practices and considerations along the way.</p>
<p>If you're new to GraphQL Schema, check out our <a href="https://tailcall.run/graphql/schemas-and-types/" target="_blank" rel="noopener noreferrer">GraphQL Schema Tutorial</a> to get up to speed with the basics.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-power-of-graphql-schemas">The Power of GraphQL Schemas<a class="hash-link" aria-label="Direct link to The Power of GraphQL Schemas" title="Direct link to The Power of GraphQL Schemas" href="https://tailcall.run/blog/graphql-schema/#the-power-of-graphql-schemas">​</a></h2>
<p>A well-designed GraphQL schema serves as the blueprint for your entire API. It defines:</p>
<ul>
<li>The types of data available</li>
<li>The relationships between those types</li>
<li>The operations clients can perform (queries, mutations, subscriptions)</li>
<li>The structure of requests and responses</li>
</ul>
<p>Your schema acts as a contract between your backend and frontend teams. Once published, clients can rely on its structure, enabling them to build UIs with confidence. A thoughtful schema design upfront can save significant refactoring down the road.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="our-example-application-techtalent">Our Example Application: TechTalent<a class="hash-link" aria-label="Direct link to Our Example Application: TechTalent" title="Direct link to Our Example Application: TechTalent" href="https://tailcall.run/blog/graphql-schema/#our-example-application-techtalent">​</a></h2>
<p>To illustrate schema design principles, let's imagine we're building TechTalent - a platform connecting tech companies with job seekers. Our application will allow:</p>
<ul>
<li>Companies to post job listings</li>
<li>Candidates to create profiles and apply to jobs</li>
<li>Recruiters to search candidates and manage applications</li>
</ul>
<p>We'll design our schema step-by-step to support these core features.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-1-identify-core-types">Step 1: Identify Core Types<a class="hash-link" aria-label="Direct link to Step 1: Identify Core Types" title="Direct link to Step 1: Identify Core Types" href="https://tailcall.run/blog/graphql-schema/#step-1-identify-core-types">​</a></h2>
<p>The first step is to identify the main entities in our domain. For TechTalent, our core types might include:</p>
<ul>
<li>Company</li>
<li>JobListing</li>
<li>Candidate</li>
<li>Application</li>
<li>Recruiter</li>
</ul>
<p>Let's start by defining these as object types in our schema:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Company</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">description</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># More fields to come</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">title</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">description</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># More fields to come</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Candidate</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">email</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># More fields to come</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Application</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># More fields to come</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Recruiter</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">email</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># More fields to come</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Notice we've only included a few basic fields at this stage. We'll flesh these out as we progress.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-2-model-relationships">Step 2: Model Relationships<a class="hash-link" aria-label="Direct link to Step 2: Model Relationships" title="Direct link to Step 2: Model Relationships" href="https://tailcall.run/blog/graphql-schema/#step-2-model-relationships">​</a></h2>
<p>Next, we need to consider how these types relate to each other. In GraphQL, we model relationships by adding fields that reference other types. Let's update our types:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Company</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">description</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">jobListings</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">recruiters</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Recruiter</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">title</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">description</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">company</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Company</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">applications</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Application</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Candidate</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">email</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">applications</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Application</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Application</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">jobListing</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">candidate</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Candidate</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">status</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">ApplicationStatus</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Recruiter</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">email</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">company</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Company</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">enum</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">ApplicationStatus</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token constant" style="color:hsl(35, 99%, 36%)">PENDING</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token constant" style="color:hsl(35, 99%, 36%)">REVIEWED</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token constant" style="color:hsl(35, 99%, 36%)">REJECTED</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token constant" style="color:hsl(35, 99%, 36%)">ACCEPTED</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We've now established the core relationships:</p>
<ul>
<li>Companies have job listings and recruiters</li>
<li>Job listings belong to a company and have applications</li>
<li>Candidates have applications</li>
<li>Applications link a candidate to a job listing</li>
<li>Recruiters belong to a company</li>
</ul>
<p>Note the use of the <code>ApplicationStatus</code> enum to represent the fixed set of possible statuses.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-3-plan-query-operations">Step 3: Plan Query Operations<a class="hash-link" aria-label="Direct link to Step 3: Plan Query Operations" title="Direct link to Step 3: Plan Query Operations" href="https://tailcall.run/blog/graphql-schema/#step-3-plan-query-operations">​</a></h2>
<p>With our core types defined, let's consider what query operations our clients will need. We'll start with some basic CRUD (Create, Read, Update, Delete) operations:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Query</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">company</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Company</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">jobListing</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">candidate</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Candidate</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># List operations</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">companies</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Company</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">jobListings</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">filters</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListingFilters</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">candidates</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">filters</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">CandidateFilters</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Candidate</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">input</span><span class="token plain"> </span><span class="token object">JobListingFilters</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">companyId</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">title</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># Add more filter options</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">input</span><span class="token plain"> </span><span class="token object">CandidateFilters</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">skills</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">experienceYears</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">Int</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># Add more filter options</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We've added basic queries to fetch individual entities by ID, as well as list queries for our main types. Notice the use of <code>input</code> types for filters - this allows for more flexible and extensible querying.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-4-plan-mutation-operations">Step 4: Plan Mutation Operations<a class="hash-link" aria-label="Direct link to Step 4: Plan Mutation Operations" title="Direct link to Step 4: Plan Mutation Operations" href="https://tailcall.run/blog/graphql-schema/#step-4-plan-mutation-operations">​</a></h2>
<p>Next, let's define some mutation operations to allow clients to modify data:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Mutation</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># Company mutations</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">createCompany</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">CreateCompanyInput</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">CreateCompanyPayload</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">updateCompany</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">UpdateCompanyInput</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">UpdateCompanyPayload</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># Job Listing mutations</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">createJobListing</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">CreateJobListingInput</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">CreateJobListingPayload</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">updateJobListing</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">UpdateJobListingInput</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">UpdateJobListingPayload</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># Candidate mutations</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">createCandidate</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">CreateCandidateInput</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">CreateCandidatePayload</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">updateCandidate</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">UpdateCandidateInput</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">UpdateCandidatePayload</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># Application mutations</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">submitApplication</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">SubmitApplicationInput</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">SubmitApplicationPayload</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">updateApplicationStatus</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">status</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">ApplicationStatus</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">UpdateApplicationStatusPayload</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token comment" style="color:hsl(230, 4%, 64%)"># Input and Payload types for each mutation...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Notice the pattern we're using for mutations:</p>
<ol>
<li>Each mutation has a corresponding input type</li>
<li>Each mutation returns a payload type</li>
</ol>
<p>This structure offers several benefits:</p>
<ul>
<li>Input types allow for easy addition of new fields in the future</li>
<li>Payload types can include both the modified entity and any errors or metadata</li>
<li>It provides a consistent structure across all mutations</li>
</ul>
<p>Let's look at an example input and payload type:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">input</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">CreateJobListingInput</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">companyId</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">title</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">description</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">requirements</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">salary</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">SalaryInput</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">input</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">SalaryInput</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">min</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">Int</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">max</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">Int</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">currency</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">CreateJobListingPayload</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">jobListing</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">errors</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Error</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Error</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">message</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">path</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This structure allows for detailed error reporting and future extensibility.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-5-consider-authentication-and-authorization">Step 5: Consider Authentication and Authorization<a class="hash-link" aria-label="Direct link to Step 5: Consider Authentication and Authorization" title="Direct link to Step 5: Consider Authentication and Authorization" href="https://tailcall.run/blog/graphql-schema/#step-5-consider-authentication-and-authorization">​</a></h2>
<p>In a production application, we need to consider authentication and authorization. Let's add some operations for user management:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Mutation</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># ... previous mutations</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">signup</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">SignupInput</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">AuthPayload</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">login</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">input</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">LoginInput</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">AuthPayload</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">logout</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">Boolean</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">input</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">SignupInput</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">email</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">password</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">role</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">UserRole</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">input</span><span class="token plain"> </span><span class="token atom-input class-name" style="color:hsl(35, 99%, 36%)">LoginInput</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">email</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">password</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">AuthPayload</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">token</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">user</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">User</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">User</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">email</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">role</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">UserRole</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">enum</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">UserRole</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token constant" style="color:hsl(35, 99%, 36%)">CANDIDATE</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token constant" style="color:hsl(35, 99%, 36%)">RECRUITER</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token constant" style="color:hsl(35, 99%, 36%)">ADMIN</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We've added basic authentication operations and a <code>User</code> type to represent authenticated users. In a real-world scenario, you'd likely want to implement more robust authentication and authorization mechanisms.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-6-implement-pagination">Step 6: Implement Pagination<a class="hash-link" aria-label="Direct link to Step 6: Implement Pagination" title="Direct link to Step 6: Implement Pagination" href="https://tailcall.run/blog/graphql-schema/#step-6-implement-pagination">​</a></h2>
<p>As our application grows, we'll need to implement pagination for our list queries. Let's update our <code>jobListings</code> query to use cursor-based pagination:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Query</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># ... other queries</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">jobListings</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">first</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">Int</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">after</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">filters</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListingFilters</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListingConnection</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListingConnection</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">edges</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListingEdge</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">pageInfo</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">PageInfo</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListingEdge</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">node</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">cursor</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">PageInfo</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">hasNextPage</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">Boolean</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">endCursor</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This implementation follows the Relay connection specification, which provides a standardized way to handle pagination in GraphQL.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-7-plan-for-real-time-updates">Step 7: Plan for Real-time Updates<a class="hash-link" aria-label="Direct link to Step 7: Plan for Real-time Updates" title="Direct link to Step 7: Plan for Real-time Updates" href="https://tailcall.run/blog/graphql-schema/#step-7-plan-for-real-time-updates">​</a></h2>
<p>For certain features, we might want to provide real-time updates. Let's add a subscription to notify when new job listings are posted:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Subscription</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">newJobListing</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Clients can subscribe to this operation to receive updates whenever a new job listing is created.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-8-implement-custom-scalars">Step 8: Implement Custom Scalars<a class="hash-link" aria-label="Direct link to Step 8: Implement Custom Scalars" title="Direct link to Step 8: Implement Custom Scalars" href="https://tailcall.run/blog/graphql-schema/#step-8-implement-custom-scalars">​</a></h2>
<p>Our schema might benefit from some custom scalar types for specific data formats. For example, let's add a <code>DateTime</code> scalar:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">scalar</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">DateTime</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># ... other fields</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">postedAt</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">DateTime</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">applicationDeadline</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">DateTime</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We'll need to implement the serialization/deserialization logic for this scalar in our resolvers.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-9-use-interfaces-for-shared-fields">Step 9: Use Interfaces for Shared Fields<a class="hash-link" aria-label="Direct link to Step 9: Use Interfaces for Shared Fields" title="Direct link to Step 9: Use Interfaces for Shared Fields" href="https://tailcall.run/blog/graphql-schema/#step-9-use-interfaces-for-shared-fields">​</a></h2>
<p>As our schema grows, we might notice some types sharing common fields. We can use interfaces to model this shared structure:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">interface</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Node</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">interface</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Timestamped</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">createdAt</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">DateTime</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">updatedAt</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">DateTime</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Company</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">implements</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Node</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Timestamped</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">createdAt</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">DateTime</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">updatedAt</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">DateTime</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># ... other fields</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">JobListing</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">implements</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Node</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Timestamped</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">createdAt</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">DateTime</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">updatedAt</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">DateTime</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># ... other fields</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This approach promotes consistency and can make it easier to implement features that work across multiple types.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-10-document-your-schema">Step 10: Document Your Schema<a class="hash-link" aria-label="Direct link to Step 10: Document Your Schema" title="Direct link to Step 10: Document Your Schema" href="https://tailcall.run/blog/graphql-schema/#step-10-document-your-schema">​</a></h2>
<p>Finally, it's crucial to document your schema thoroughly. GraphQL allows for built-in documentation:</p>
<div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token description string" style="color:hsl(119, 34%, 47%)">"""</span><span class="token description string language-markdown" style="color:hsl(119, 34%, 47%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token description string language-markdown" style="color:hsl(119, 34%, 47%)">Represents a company on the TechTalent platform.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token description string language-markdown" style="color:hsl(119, 34%, 47%)"></span><span class="token description string" style="color:hsl(119, 34%, 47%)">"""</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">type</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Company</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">implements</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Node</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">&amp;</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Timestamped</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token description string" style="color:hsl(119, 34%, 47%)">"""</span><span class="token description string language-markdown" style="color:hsl(119, 34%, 47%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token description string language-markdown" style="color:hsl(119, 34%, 47%)">  Unique identifier for the company.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token description string language-markdown" style="color:hsl(119, 34%, 47%)">  </span><span class="token description string" style="color:hsl(119, 34%, 47%)">"""</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token description string" style="color:hsl(119, 34%, 47%)">"""</span><span class="token description string language-markdown" style="color:hsl(119, 34%, 47%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token description string language-markdown" style="color:hsl(119, 34%, 47%)">  The name of the company.</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token description string language-markdown" style="color:hsl(119, 34%, 47%)">  </span><span class="token description string" style="color:hsl(119, 34%, 47%)">"""</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token operator" style="color:hsl(221, 87%, 60%)">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># ... other fields</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Good documentation helps both your team and API consumers understand the purpose and usage of each type and field.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="visualizing-the-schema">Visualizing the Schema<a class="hash-link" aria-label="Direct link to Visualizing the Schema" title="Direct link to Visualizing the Schema" href="https://tailcall.run/blog/graphql-schema/#visualizing-the-schema">​</a></h2>
<p>To better understand the relationships in our schema, let's visualize the core types:</p>
<p><img decoding="async" loading="lazy" alt="Diagram Illustrating Relationships between various types " src="https://tailcall.run/assets/images/entity-relationships-2d7b047c41d6a71837d65630d704b2f7.png" width="865" height="825" class="img_ev3q"></p>
<p>This diagram illustrates the key relationships between our main entities, helping us ensure our schema accurately represents our domain.</p>
<p>To visualize your schema, you can use tools like <a href="https://graphql-kit.com/graphql-voyager/" target="_blank" rel="noopener noreferrer">GraphQL Voyager</a>.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="best-practices-and-considerations">Best Practices and Considerations<a class="hash-link" aria-label="Direct link to Best Practices and Considerations" title="Direct link to Best Practices and Considerations" href="https://tailcall.run/blog/graphql-schema/#best-practices-and-considerations">​</a></h2>
<p>As we've designed our schema, we've touched on several best practices. Let's recap some key points and add a few more considerations:</p>
<ol>
<li>
<p><strong>Start with the UI in mind</strong>: Design your schema based on how the data will be used in your UI, not just how it's stored in your database.</p>
</li>
<li>
<p><strong>Use clear, consistent naming</strong>: Adopt a naming convention (e.g., PascalCase for types, camelCase for fields) and stick to it.</p>
</li>
<li>
<p><strong>Leverage GraphQL features</strong>: Make use of enums, interfaces, and unions to create a rich, expressive schema.</p>
</li>
<li>
<p><strong>Plan for change</strong>: Use input types for mutations and consider versioning strategies for evolving your schema over time.</p>
</li>
<li>
<p><strong>Optimize for performance</strong>: Be mindful of N+1 query problems and consider implementing DataLoader or similar batching mechanisms.</p>
</li>
<li>
<p><strong>Secure your schema</strong>: Implement proper authentication and authorization. Consider using directives for field-level permissions.</p>
</li>
<li>
<p><strong>Validate input</strong>: Use non-nullable fields and custom scalars to enforce data integrity at the schema level.</p>
</li>
<li>
<p><strong>Provide meaningful errors</strong>: Return detailed error information in your mutation payloads to help clients handle failures gracefully.</p>
</li>
<li>
<p><strong>Monitor and analyze</strong>: Implement logging and monitoring to understand how your schema is being used and where optimizations can be made.</p>
</li>
<li>
<p><strong>Keep it DRY</strong>: Use interfaces and abstract types to reduce duplication in your schema.</p>
</li>
</ol>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://tailcall.run/blog/graphql-schema/#conclusion">​</a></h2>
<p>Designing a production-grade GraphQL schema is an iterative process that requires careful thought and planning. By starting with core types and relationships, then gradually adding queries, mutations, and advanced features, we can build a schema that's both powerful and maintainable.</p>
<p>Remember, your schema is a living document. As your application evolves, so too will your schema. By following these principles and best practices, you'll be well-equipped to design and maintain a GraphQL schema that can grow with your needs.</p>
<p>The TechTalent example we've explored here demonstrates many real-world considerations, but every application will have its unique requirements. Always design with your specific use cases in mind, and don't be afraid to iterate as you learn more about how your API is used in practice.</p>
<p>By investing time in thoughtful schema design upfront, you'll create a solid foundation for your GraphQL API, enabling efficient development and a great experience for your API consumers.</p>]]></content>
        <author>
            <name>Amit Singh</name>
            <uri>https://github.com/amitksingh1490</uri>
        </author>
        <category label="GraphQL" term="GraphQL"/>
        <category label="API" term="API"/>
        <category label="Schema" term="Schema"/>
        <category label="Design" term="Design"/>
        <category label="Best Practices" term="Best Practices"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing a GraphQL Backend by Hand is Long Gone]]></title>
        <id>https://tailcall.run/blog/writing-a-graphql-backend-by-hand-is-long-gone/</id>
        <link href="https://tailcall.run/blog/writing-a-graphql-backend-by-hand-is-long-gone/"/>
        <updated>2024-05-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Writing a GraphQL backend by hand doesn't scale beyond a point.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Cover Image for Writing a GraphQL Backend by Hand is Long Gone" src="https://tailcall.run/assets/images/no-code-cover-68e9ee8f775a13325ca461d38be4fbe3.png" width="1600" height="840" class="img_ev3q">
Building a GraphQL backend by hand might seem like a noble pursuit, but the landscape of API development is evolving rapidly, and so are the challenges that come with it. Today, the process is often fraught with complexity, performance bottlenecks, security vulnerabilities, and reliability issues. Yet again, we had a developer expressing <a href="https://bessey.dev/blog/2024/05/24/why-im-over-graphql/" target="_blank" rel="noopener noreferrer">frustration</a> about the issues with GraphQL and the reasons for leaving our mighty ship. I wish to dive deeper into these challenges and explore why the future points towards automated, high-performance solutions.</p>
<!-- -->
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="complexity-with-graphql">Complexity with GraphQL<a class="hash-link" aria-label="Direct link to Complexity with GraphQL" title="Direct link to Complexity with GraphQL" href="https://tailcall.run/blog/writing-a-graphql-backend-by-hand-is-long-gone/#complexity-with-graphql">​</a></h2>
<p>If you see, most of the concerns with GraphQL are around building a robust GraphQL backend. It's rarely about consuming GraphQL, because if you look closely at the GraphQL spec, you will find that it's focused on how to elegantly consume data. As long as the output of your backend matches what's expected in the query, the specification doesn't care about how the backend is implemented.</p>
<p>Hence, the main complexity with GraphQL comes with how GraphQL is built. One of the major hurdles in hand-coding a GraphQL backend is managing performance. Issues like batching, incorrect usage of data loaders, caching, and the notorious N+1 problem can cripple your application.</p>
<p>Manually implementing batching mechanisms and data loaders can be incredibly tedious. While libraries like <a href="https://github.com/graphql/dataloader" target="_blank" rel="noopener noreferrer">DataLoader</a> can assist, integrating them seamlessly into your system requires a deep understanding of both your data and the GraphQL query patterns. Overuse of data loaders is so common with most GraphQL implementations that ultimately it becomes the main culprit for high latency.</p>
<p>Secondly, traditional caching doesn't work with GraphQL, so you have to resort to all sorts of solutions, using persisted queries or some vendor-specific implementation of caching. Implementing effective caching strategies is essential for performance but it's tricky. Developers must decide what to cache, when to invalidate the cache, and how to manage cache consistency, which adds another layer of complexity.</p>
<p>The N+1 issue, boy, that's perhaps everyone's favorite issue with GraphQL. It arises when executing multiple upstream requests that could have been combined into one, leading to massive performance degradation. Detecting and solving this requires meticulous analysis of query patterns and database access, which requires developers to have the context of the whole query at once, generate a query plan, translate it to appropriate upstream calls, and then execute! That's a lot of complex engineering effort; building a general-purpose query engine is not for the faint-hearted, and in the midst of all this complex yet interesting work, I need to ship features!</p>
<blockquote>
<p><a href="https://grafast.org/grafast" target="_blank" rel="noopener noreferrer">Grafast</a> is an upcoming generalized query planner that could make query-planning in JS a bit more tamed.</p>
</blockquote>
<p>GraphQL’s flexibility can be a double-edged sword when it comes to security, necessitating robust mechanisms for authentication and authorization. Like caching, traditional route-based API access doesn't work with GraphQL. Implementing these security layers correctly involves ensuring that only authenticated users can access the GraphQL entity and that they can only access data or fields that they are authorized to see. This requires fine-grained control and often custom logic and the invention of a new standard that works just for you.</p>
<p>Lastly, but most importantly, ensuring your GraphQL API is reliable means tackling error handling, propagation, and telemetry. Proper error handling in GraphQL is crucial for providing meaningful feedback to clients and maintaining the integrity of your application. The GraphQL team recently started working on a <a href="https://graphql-http.com/" target="_blank" rel="noopener noreferrer">standard</a> for serving GraphQL over HTTP, which won't be easy to integrate if you already have a GraphQL API running in production. Moreover, integrating telemetry within a GraphQL backend isn't easy either; it is a very involved process to integrate spans to trace GraphQL resolvers. And, if you have written your GraphQL layer by hand in JavaScript, be ready for some <a href="https://github.com/DataDog/dd-trace-js/issues/1095" target="_blank" rel="noopener noreferrer">significant performance degradation</a>.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="graphql-is-more-like-sql-and-less-like-rest">GraphQL is more like SQL and less like REST<a class="hash-link" aria-label="Direct link to GraphQL is more like SQL and less like REST" title="Direct link to GraphQL is more like SQL and less like REST" href="https://tailcall.run/blog/writing-a-graphql-backend-by-hand-is-long-gone/#graphql-is-more-like-sql-and-less-like-rest">​</a></h2>
<p>We talked about it in our <a href="https://tailcall.run/blog/graphql-vs-rest-vs-grpc/">previous</a> blog why GraphQL isn't like REST or gRPC. I would argue that SQL is a closer elder sibling of GraphQL than REST or gRPC. Writing a GraphQL backend can be likened to building an SQL engine manually. Imagine if every time you wanted to interact with a database, you had to write the SQL engine from scratch. Every time you made a database change, you would need to rewrite your engine so that it can work with the new schema or indexes. It’s inefficient and impractical; no one does that. Fortunately, modern databases come with embedded, high-performance SQL engines such as <a href="https://calcite.apache.org/" target="_blank" rel="noopener noreferrer">Apache Calcite</a> that adhere to the SQL specification but abstract away the complexities around building it. These databases allow developers to focus on writing queries and managing data without worrying about the underlying mechanics, thanks to their sophisticated query engines.</p>
<p>GraphQL, much like SQL, is a query language designed to allow clients to request exactly the data they need. Unlike REST, which relies on fixed endpoints, or gRPC, which focuses on remote procedure calls, GraphQL provides a flexible, hierarchical way to fetch and manipulate data, making it a closer analog to SQL in terms of expressiveness and precision. And I believe the future of GraphQL is going to be like the journey of this elder sibling.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-future-of-graphql">The future of GraphQL<a class="hash-link" aria-label="Direct link to The future of GraphQL" title="Direct link to The future of GraphQL" href="https://tailcall.run/blog/writing-a-graphql-backend-by-hand-is-long-gone/#the-future-of-graphql">​</a></h2>
<p>The future of GraphQL development is moving towards generalized automated solutions built on modern, low-level system stacks like Rust and Zig, and moving away from the prevalent hand-written Node.js-based solutions of today.</p>
<p><a href="https://hygraph.com/graphql-survey-2024#how-developers-build-graphql-apis" target="_blank" rel="noopener noreferrer"><img decoding="async" loading="lazy" alt="Most common GraphQL implementations" src="https://tailcall.run/assets/images/graphql-stack-880abce75436b517126964e51e39ab9a.png" width="1750" height="1136" class="img_ev3q"></a></p>
<ul>
<li>
<p>These engines will connect to data sources of any type and build a GraphQL endpoint on top of them. They will find connections between other data sources, sometimes completely automatically and sometimes using hints given by the developer, creating a unified GraphQL experience.</p>
</li>
<li>
<p>Similar to SQL engines, which use JIT techniques to identify performance optimizations at runtime, GraphQL engines will become extremely smart about performance. My hope is that GraphQL will eventually move away from its dependency on the JSON protocol, into something more efficient such as protobuf.</p>
</li>
<li>
<p>There is definitely going to be a lot of work put into the standardization of the loose ends. GraphQL engines will eventually converge on error handling and error propagation strategies. GraphQL on HTTP is the first step in that direction. Authentication and Authorization too will very quickly become standard features of GraphQL, so you won't need to worry about inventing a new way of authentication. This will all be packed into a GraphQL standard. This might be a stretch, but if the standards team gets together, I think even GraphQL caching will be consistent across all GraphQL engines, and you will be able to switch from one caching solution to another without locking into a vendor-specific implementation.</p>
</li>
</ul>
<p>You might have already seen a wave of open-source solutions that build GraphQL on top of existing data sources. One such solution paving the way is <a href="https://tailcall.run/" target="_blank" rel="noopener noreferrer">Tailcall</a>. Tailcall’s platform is designed to automate the creation, validation, and optimization of GraphQL backends. Sticking to standards and ensuring developers don't ever have to pay the heavy tax of using GraphQL that they do today, do check it out!</p>
<p>Lastly, if you are reading this today and thinking of writing a GraphQL server by hand, I urge you to reconsider and use something that does this for you. Before you know it, your handwritten solution will be deprecated in favor of something faster, easier, and more secure: an automatic GraphQL solution.</p>]]></content>
        <author>
            <name>Tushar Mathur</name>
            <uri>https://github.com/tusharmath</uri>
        </author>
        <category label="GraphQL" term="GraphQL"/>
        <category label="Node.js" term="Node.js"/>
        <category label="JavaScript" term="JavaScript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL vs REST vs gRPC - an unfair comparison]]></title>
        <id>https://tailcall.run/blog/graphql-vs-rest-vs-grpc/</id>
        <link href="https://tailcall.run/blog/graphql-vs-rest-vs-grpc/"/>
        <updated>2024-03-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Understand what makes GraphQL different from REST and gRPC.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Cover Image for GraphQL vs REST vs gRPC - an unfair comparison" src="https://tailcall.run/assets/images/gql-vs-rest-vs-grpc-cover-0125c7770307f0d0a45a120aeff04d8a.png" width="1600" height="840" class="img_ev3q"></p>
<!-- -->
<p>Since its inception, GraphQL has steadily gained popularity, often finding itself at the center of comparisons with other data query and manipulation languages such as REST and gRPC. The internet is replete with articles debating the merits and demerits of each, with some even questioning the viability of GraphQL. However, this discourse misses a crucial point: the unique strengths of GraphQL. This article aims to illuminate the distinct advantages GraphQL offers, particularly in addressing a common but complex challenge known as impedance mismatch.</p>
<p>Impedance mismatch refers to the discordance between the capabilities of an existing API and the ideal features required for a specific use case. From the perspective of a platform engineer, the goal is to develop APIs that cater to a broad range of needs. Yet, crafting a unique API for every conceivable requirement is neither practical nor efficient. Consequently, engineers often end up creating generalized APIs. However, as a consumer, you might find these APIs lacking in some respects while being superfluous in others. Furthermore, as your needs evolve, so does your notion of the ideal API, exacerbating this mismatch. Herein lies the brilliance of GraphQL: it offers a framework for structuring data exposure and queries that significantly mitigates this issue.</p>
<p>The GraphQL specification introduces the concept of viewing data as a graph composed of nodes, which represent domain entities for a business, interconnected by relationships that define their interactions. For instance, in the development of a social network, a user entity might have the ability to create a post, which in turn could receive comments, illustrating the interconnected nature of data entities.
<img decoding="async" loading="lazy" alt="Image Demonstrating a graph of entities" src="https://tailcall.run/assets/images/entity-graph-f8e869965d51c9408c1b3de68f05cb89.png" width="2259" height="1320" class="img_ev3q"></p>
<p>With the data conceptualized as a graph, GraphQL advocates for a method of querying that allows for precise data retrieval. This selective querying capability enables developers to request exactly the data they need, distinguishing GraphQL from REST and gRPC which aren't truly a "queryable". The precision of GraphQL extends to the granularity of specifying individual fields within entities, facilitating extremely efficient and targeted queries.
<img decoding="async" loading="lazy" alt="Image Demonstrating a relations between entities" src="https://tailcall.run/assets/images/entity-relation-33e0f81fc0baa5ea47249c3c7a57a582.png" width="2259" height="1324" class="img_ev3q"></p>
<p>Notably, the GraphQL specification does not prescribe any specific data storage methodologies but focuses on the manner in which data is queried, hence the designation "Graph Query Language." This approach allows for queries tailored to specific requirements, such as obtaining posts by the current user along with comments on those posts. By enabling precise data queries, GraphQL helps in avoiding the inefficiencies associated with over-fetching or under-fetching data, thereby enhancing overall system performance.</p>
<p>The impedance mismatch is not solely a technical issue pertaining to the differences in API schemas. It extends into the realm of development processes as well. GraphQL significantly ameliorates this aspect by allowing the consumers of an API to begin their work even before the actual API is fully implemented. This is made possible through the agreement on a schema upfront. By decoupling the dependency between the consumer and the provider of the API, GraphQL facilitates a more efficient and flexible development process.</p>
<p>Comparing GraphQL with REST or gRPC on this front might not do justice to their distinct objectives. REST and gRPC are primarily designed as lightweight RPC protocols, not specifically to address impedance mismatch for which a full fledged query language is more suitable. A more apt comparison would be with OpenAPI, which also allows for API composition. However, OpenAPI's capabilities in fine-tuning what an API delivers are somewhat <a href="https://swagger.io/specification/#composition-and-inheritance-polymorphism" target="_blank" rel="noopener noreferrer">constrained</a> compared to GraphQL's flexible querying capabilities.</p>
<p>Beyond the technical resolution of impedance mismatch, GraphQL addresses a critical business problem: the inefficiency in software development that arises from this gap between actual and ideal APIs. This inefficiency leads to developers spending excessive time on API orchestration—time that could be better spent on core application development. They find themselves constantly writing, revising, and optimizing APIs and their orchestration, as well as managing the fallout from breaking changes. By leveraging GraphQL, developers can significantly reduce these frictions, streamlining the development process and enhancing productivity. In essence, GraphQL not only solves a technical problem but also delivers substantial business value by enabling more efficient and flexible software development practices.</p>
<p>GraphQL offers an excellent developer experience for API consumption with its intuitive query language that allows for retrieving deeply nested data independently of the upstream source. However, it does have some limitations. At <a href="https://tailcall.run/" target="_blank" rel="noopener noreferrer">Tailcall</a>, we are dedicated to making GraphQL more accessible and easier to work with.</p>
<p>If you like what you just read, please do subscribe and share on twitter and linkedin 🙏</p>]]></content>
        <author>
            <name>Tushar Mathur</name>
            <uri>https://github.com/tusharmath</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL Conf 2023]]></title>
        <id>https://tailcall.run/blog/graphql-conf-2023/</id>
        <link href="https://tailcall.run/blog/graphql-conf-2023/"/>
        <updated>2023-09-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A glimpse into the future of GraphQL! 🚀.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="A Photo from GraphQL Conf 2023" src="https://tailcall.run/assets/images/graphql-conf-2023-541a914dd41282923959f8d5ab588d4f.png" width="1600" height="840" class="img_ev3q">
GraphQLConf 2023 wasn't just another tech conference; it was a groundbreaking event hosted by the GraphQL Foundation. Bursting with riveting workshops, enlightening talks, and interactive sponsor booths, this conference was a deep dive into the ever-evolving world of GraphQL.</p>
<!-- -->
<p>Gone are the days when GraphQL was just for UI developers. This year's theme revolved around the long-term vision of GraphQL and its seamless integration into backend architecture. It was all about the bigger picture!</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="workshops--talks-highlights"><strong>Workshops &amp; Talks Highlights</strong><a class="hash-link" aria-label="Direct link to workshops--talks-highlights" title="Direct link to workshops--talks-highlights" href="https://tailcall.run/blog/graphql-conf-2023/#workshops--talks-highlights">​</a></h3>
<ul>
<li>
<p><strong>Is GraphQL BFF Necessary:</strong> An electrifying discussion led by Tanmay from Hasura, as he unravels the significance of the BFF layer in the era after ReactJS. One profound takeaway?</p>
<blockquote>
<p><em>GraphQL isn't just a fleeting tactic for instant gains—it's a visionary strategy that propels businesses toward unparalleled success!</em></p>
</blockquote>
</li>
<li>
<p><strong>Interactive GraphQL with Envoy &amp; Kubernetes</strong>: The team from solo.io showcased the magic of adding GraphQL to an envoy gateway. It's all about giving clients more power while retaining essential gateway features.</p>
</li>
<li>
<p><strong>The Future of Efficiency</strong>: Benjie Gillam's talk was a rollercoaster! He introduced grafast, a new GraphQL execution engine that optimizes data loading through query planning. One to watch!</p>
</li>
<li>
<p><strong>Rethinking Rate Limiting</strong>: Meenakshi Dhanani from Postman took us on a journey through the intricacies of rate-limiting GraphQL queries. Traditional methods? Not so effective. Enter query cost analysis!</p>
</li>
<li>
<p><strong>GraphQL Fusion Unveiled</strong>: Michael Staib from ChilliCream introduced GraphQL Fusion, a revolutionary approach to building distributed GraphQL APIs. The future of federating GraphQL APIs is looking bright!</p>
</li>
<li>
<p><strong>The Null Saga</strong>: Stephen Spalding from Netflix delved into the history of 'null' and introduced the Client Controlled Nullability proposal. A game-changer for GraphQL clients, we are definitely looking forward to this one!</p>
</li>
<li>
<p><strong>The Right Size for GraphQL</strong>: Theo Browne's presentation was an eye-opener. He introduced us to scenarios where tRPC might be a better fit than GraphQL.</p>
</li>
<li>
<p><strong>Data Load 3.0:</strong> Jens from Wundergraph talked about the massive performance gains one could potentially get by using a BFS algorithm in data loaders.</p>
</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="unconference-session-where-everyones-a-speaker"><strong>Unconference Session: Where Everyone's a Speaker!</strong><a class="hash-link" aria-label="Direct link to unconference-session-where-everyones-a-speaker" title="Direct link to unconference-session-where-everyones-a-speaker" href="https://tailcall.run/blog/graphql-conf-2023/#unconference-session-where-everyones-a-speaker">​</a></h3>
<p>This was our first time to such a thing. The conference kicked off with a dynamic unconference session. Everyone in attendance brainstormed discussion topics grouped them, and then dove deep into discussions. Our table delved into the multifaceted world of "Federation" - merging multiple GraphQL graphs into a supergraph. The consensus? The journey towards a supergraph is filled with challenges, but with tools like the Open Federation spec and GraphQL Fusion, the future looks promising!</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="networking--global-connections"><strong>Networking &amp; Global Connections</strong><a class="hash-link" aria-label="Direct link to networking--global-connections" title="Direct link to networking--global-connections" href="https://tailcall.run/blog/graphql-conf-2023/#networking--global-connections">​</a></h3>
<p>One of the highlights of GraphQLConf 23 was the global representation. Meeting tech enthusiasts from the Netherlands, New Zealand, Poland, Romania, and more was truly inspiring. Special shoutout to Gerard Klijs from AxonIQ for his unique take on CQRS and GraphQL!</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion"><strong>Conclusion</strong><a class="hash-link" aria-label="Direct link to conclusion" title="Direct link to conclusion" href="https://tailcall.run/blog/graphql-conf-2023/#conclusion">​</a></h3>
<p>Did you miss out on some sessions? No worries! All the talks are available on the GraphQL Foundation's <a href="https://www.youtube.com/playlist?list=PLP1igyLx8foE9SlDLI1Vtlshcon5r1jMJ" target="_blank" rel="noopener noreferrer">YouTube</a> channel. Dive in and get inspired!</p>
<p>GraphQLConf 2023 was more than just a conference for us; it was an experience. Here's to the future of GraphQL and the endless possibilities it holds! 🎉</p>]]></content>
        <author>
            <name>Sujeet Sreenivasan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The truth about scaling Automatic Persisted Queries]]></title>
        <id>https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/</id>
        <link href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/"/>
        <updated>2023-08-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn about the limitations and potential scaling issues that accompany Automatic Persisted Queries (APQ).]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Cover Image for The truth about scaling Automatic Persisted Queries" src="https://tailcall.run/assets/images/apq-cover-fac8aa7699edd3ece6e74ad785c3a06b.png" width="1600" height="840" class="img_ev3q"></p>
<p>Persisted queries are often hailed as a solution to several challenges in GraphQL related to network performance, caching, and maintenance. However, they may not always be the silver bullet they appear to be. This post delves into the concept of persisted queries (PQ) and automatic persisted queries (APQ), highlighting the limitations and potential scaling issues that accompany these technologies.</p>
<!-- -->
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-problem">The Problem<a class="hash-link" aria-label="Direct link to The Problem" title="Direct link to The Problem" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#the-problem">​</a></h3>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="large-queries">Large Queries<a class="hash-link" aria-label="Direct link to Large Queries" title="Direct link to Large Queries" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#large-queries">​</a></h4>
<p>Clients send queries to a GraphQL server as HTTP requests that include the query as the body. When these queries become large, they can lead to increased latency and network usage, degrading client performance.</p>
<p>For example, a normal GraphQL query might look like this:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">curl -X POST -H "Content-Type: application/json" \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  --data '{"query": "{ largeQuery { field1 field2 ... } }"}' \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  http://your-graphql-server.com/graphql</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Each GraphQL query is parsed every time the server receives it. If it's large, the parsing can take a significant amount of time, increasing latency even further.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="legacy-infrastructure">Legacy Infrastructure<a class="hash-link" aria-label="Direct link to Legacy Infrastructure" title="Direct link to Legacy Infrastructure" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#legacy-infrastructure">​</a></h4>
<p>Existing CDN infrastructure is designed to cache only GET calls. To make a GraphQL request, one must make a POST call. This limits the usage of CDNs for caching purposes.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="solution-persisted-queries-pq">Solution: Persisted Queries (PQ)<a class="hash-link" aria-label="Direct link to Solution: Persisted Queries (PQ)" title="Direct link to Solution: Persisted Queries (PQ)" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#solution-persisted-queries-pq">​</a></h3>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="definition-and-benefits">Definition and Benefits<a class="hash-link" aria-label="Direct link to Definition and Benefits" title="Direct link to Definition and Benefits" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#definition-and-benefits">​</a></h4>
<p>To enhance network performance for large query strings, GraphQL server supports Persisted Queries (PQ). A PQ is a GraphQL query cached server-side, identified by its SHA-256 hash. Clients send this identifier instead of the query, dramatically reducing request sizes (without affecting response), saving parsing time, and enabling GET calls instead of POST.</p>
<p>A PQ request might look like this:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">curl -X GET -H "Content-Type: application/json" \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  --data-urlencode 'extensions={"persistedQuery":{"version":1,"sha256Hash":"&lt;SHA 256&gt;"}}' \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  http://your-graphql-server.com/graphql</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="application-with-cdns">Application with CDNs<a class="hash-link" aria-label="Direct link to Application with CDNs" title="Direct link to Application with CDNs" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#application-with-cdns">​</a></h4>
<p>Using the PQ link automatically sends short hashed queries as GET requests, enabling CDNs to serve them.</p>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="latency-reduction"><strong>Latency Reduction</strong><a class="hash-link" aria-label="Direct link to latency-reduction" title="Direct link to latency-reduction" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#latency-reduction">​</a></h5>
<ul>
<li>
<p><strong>No Parsing Overhead</strong>: Since the query isn't sent to the server, the parsing stage, which can be computationally expensive, is eliminated. This saves valuable server processing time, directly reducing client latency.</p>
</li>
<li>
<p><strong>Network Efficiency</strong>: By transmitting only the hash instead of the full query, the request size is dramatically reduced, leading to faster network transmission and lower latency.</p>
</li>
</ul>
<h5 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="security-enhancements"><strong>Security Enhancements</strong><a class="hash-link" aria-label="Direct link to security-enhancements" title="Direct link to security-enhancements" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#security-enhancements">​</a></h5>
<ul>
<li>
<p><strong>Control Over Allowed Queries</strong>: The server can start with a finite set of "allowed" queries, ensuring that unauthorized or unoptimized GraphQL requests cannot be made. This control is a significant safeguard for production environments, preventing potential abuse or inefficiencies.</p>
</li>
<li>
<p><strong>Reduction in Attack Surface</strong>: By limiting the queries to a pre-defined set, the risk of malicious queries is reduced, enhancing the security profile of the application.</p>
</li>
</ul>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="problem">Problem<a class="hash-link" aria-label="Direct link to Problem" title="Direct link to Problem" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#problem">​</a></h4>
<p>While PQs provide remarkable benefits, they are not without challenges:</p>
<ul>
<li>
<p><strong>Schema Rigidity</strong>: If you aim to keep the schema open and queries dynamic, supporting any possible query becomes complex.</p>
</li>
<li>
<p><strong>Maintenance of Cached Queries</strong>: Managing the cache of allowed queries and keeping them in sync with evolving client needs can become a maintenance burden, especially in a fast-changing environment.</p>
</li>
</ul>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="automatic-persisted-queries-apqs">Automatic Persisted Queries (APQs)<a class="hash-link" aria-label="Direct link to Automatic Persisted Queries (APQs)" title="Direct link to Automatic Persisted Queries (APQs)" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#automatic-persisted-queries-apqs">​</a></h3>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="apqs-vs-pqs">APQs vs PQs<a class="hash-link" aria-label="Direct link to APQs vs PQs" title="Direct link to APQs vs PQs" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#apqs-vs-pqs">​</a></h4>
<p>APQs are a supposed improvement over PQs. In a PQ setup, the server runs with a known set of queries, meaning client changes require server updates. This has implications for maintenance costs, particularly in supporting multiple versions of queries and making a server deployment for every change in the client query. APQs were introduced to overcome these challenges.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="how-apqs-work">How APQs Work<a class="hash-link" aria-label="Direct link to How APQs Work" title="Direct link to How APQs Work" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#how-apqs-work">​</a></h4>
<p>The APQ process is a two-step approach:</p>
<ol>
<li>
<p><strong>Hash Request</strong>: The client sends a request with the hash of the query. If the server recognizes the hash, it returns the corresponding response:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">curl -X GET -H "Content-Type: application/json" \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  --data-urlencode 'extensions={"persistedQuery":{"version":1,"sha256Hash":"&lt;SHA 256&gt;"}}' \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  http://your-graphql-server.com/graphql</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p><strong>Full Query Request</strong>: If the server does not recognize the hash, it returns an error. The client then sends a new request that includes both the hash and the full query string:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">curl --get http://localhost:4000/graphql \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  --header 'content-type: application/json' \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  --data-urlencode '{"query": "{ largeQuery { field1 field2 ... } }"}' \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  --data-urlencode 'extensions={"persistedQuery":{"version":1,"sha256Hash":"&lt;HASH&gt;"}}'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The server parses the full query, caches it for future use, and returns the GraphQL response. Subsequent requests use the hash.</p>
</li>
</ol>
<p>This process optimizes network performance while allowing flexibility in the queries that can be run. You can read more about APQ <a href="https://www.apollographql.com/docs/apollo-server/performance/apq/" target="_blank" rel="noopener noreferrer">here</a></p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="problems-with-apqs">Problems with APQs<a class="hash-link" aria-label="Direct link to Problems with APQs" title="Direct link to Problems with APQs" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#problems-with-apqs">​</a></h3>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="thundering-herd-problem">Thundering Herd Problem<a class="hash-link" aria-label="Direct link to Thundering Herd Problem" title="Direct link to Thundering Herd Problem" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#thundering-herd-problem">​</a></h4>
<p>Consider a situation where a server has just been deployed or restarted, and the cache is empty. Now, multiple clients send hash requests for queries that are not yet cached.</p>
<ol>
<li>
<p><strong>Massive Error Responses</strong>: Since the cache is empty, the server returns errors for all hash requests, signaling the clients to send the full query strings.</p>
</li>
<li>
<p><strong>Simultaneous Full Query Requests</strong>: All clients now simultaneously send full query requests, causing a sudden surge in demand.</p>
</li>
<li>
<p><strong>Server Strain</strong>: The server must parse and cache each unique query, placing significant strain on its resources. This can lead to increased latency and even server failure if the demand is too high.</p>
</li>
<li>
<p><strong>Repeated Pattern</strong>: If the server struggles to cache the queries quickly enough, the clients may continue to receive errors and retry the full query requests, perpetuating the problem.</p>
</li>
</ol>
<p>In an environment with many clients and dynamically changing queries, the system can become vulnerable to sudden surges in demand. This vulnerability can undermine the performance benefits APQs are designed to provide, leading to potential system instability.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cache-limitations">Cache Limitations<a class="hash-link" aria-label="Direct link to Cache Limitations" title="Direct link to Cache Limitations" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#cache-limitations">​</a></h4>
<p>Queries are typically cached in memory, requiring cache warmup on each instance, hindering deployment on server-less solutions. An alternative could be using a centralized cache, but it typically nullifies performance gains due to serialization, deserialization, and IO call overhead.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="security-concerns">Security Concerns<a class="hash-link" aria-label="Direct link to Security Concerns" title="Direct link to Security Concerns" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#security-concerns">​</a></h4>
<p>Automatically persisting queries can cause memory leaks, as clients can send varying query combinations, exhausting server memory. Mitigation through cache size limits and eviction mechanisms may lead to frequent cache misses, leading to doubling request numbers.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="possible-solution">Possible Solution<a class="hash-link" aria-label="Direct link to Possible Solution" title="Direct link to Possible Solution" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#possible-solution">​</a></h3>
<p>Persistent queries are a great improvement over regular queries. They clearly improve performance and are more secure. APQs on the other hand though try to give more flexibility they can become quite messy to deal with as you scale. One alternative that is significantly more effective, is to run GraphQL on Edge itself. Essentially write your own CDN layer that is smart enough to understand that it's a graphQL and deploy it on edge with caching and whatnot! This is hard, and that's exactly what <a href="https://tailcall.run/" target="_blank" rel="noopener noreferrer">Tailcall</a> helps solve.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://tailcall.run/blog/the-truth-about-scaling-automatic-persisted-queries/#conclusion">​</a></h3>
<p>Automatic persisted queries, while offering some advantages in network performance, reveal significant challenges when it comes to scaling. The complexities of caching, potential security risks, and the inherent problems with automatic persistence highlight that persisted queries may not be the one-size-fits-all solution they are often portrayed as.</p>
<p>The question of whether to implement PQ or APQ must be approached with caution, taking into account the specific requirements and potential scalability issues of your system. While they may serve as a useful tool in certain scenarios, understanding the limitations and conducting thorough analysis is vital to avoid falling into the trap of a solution that doesn't truly scale. This blog post has aimed to shed light on these complexities, encouraging a more nuanced perspective on a topic that is often oversimplified.</p>]]></content>
        <author>
            <name>Tushar Mathur</name>
            <uri>https://github.com/tusharmath</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unraveling the Challenges of BFF Federation]]></title>
        <id>https://tailcall.run/blog/unraveling-the-challenges-of-bff-federation/</id>
        <link href="https://tailcall.run/blog/unraveling-the-challenges-of-bff-federation/"/>
        <updated>2023-06-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A different take on GraphQL Federation.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Cover Image for Unraveling the Challenges of BFF Federation" src="https://tailcall.run/assets/images/bff-cover-591717954e6cfda4e001dc14b9914060.png" width="1600" height="840" class="img_ev3q">
In our <a href="https://blog.tailcall.run/no-one-talks-about-api-orchestration" target="_blank" rel="noopener noreferrer">previous</a> blog post, we discussed the challenges of API Orchestration and its often overlooked role in a microservices architecture. We explored how, while it serves as an abstraction for frontend apps and websites, this abstraction's performance is very sensitive to network latency and device performance thus directly impacting end-user experience. One proposed solution was to create a Backend for Frontend (BFF) layer, essentially moving the frontend abstraction to powerful servers within your VPC. Although this approach effectively addresses the user experience problem and simplifies the work of front-end engineers, it introduces a new set of challenges for the backend, leading to difficulties in scaling the monolithic solution. Here's what the BFF architecture looked like:</p>
<!-- -->
<p><img decoding="async" loading="lazy" alt="Architecture Diagram for BFF" src="https://tailcall.run/assets/images/bff-architecture-a7202e41d6faa47b7ef3598111eb96eb.png" width="3616" height="2224" class="img_ev3q"></p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="using-a-bff-federation">Using a BFF Federation<a class="hash-link" aria-label="Direct link to Using a BFF Federation" title="Direct link to Using a BFF Federation" href="https://tailcall.run/blog/unraveling-the-challenges-of-bff-federation/#using-a-bff-federation">​</a></h2>
<p>Federation, as a concept, is not exclusive to GraphQL. In essence, it's about abstracting multiple data sources or services into a unified, single API interface that can be consumed by clients. This approach is not unique to any particular technology or framework and can be implemented with various tools and languages.</p>
<p>However, GraphQL has played a significant role in popularizing the concept of federation. With its strong typing, introspective capabilities, and its natural fit for defining schemas across distributed services, it has provided an elegant solution to the challenge of federating APIs.</p>
<p>While this blog discusses federation in the context of GraphQL, it's essential to understand that the core principles and challenges of the federation can be applied beyond GraphQL. Remember, the implementation of federation is not about a specific technology, but about the architectural approach to create a unified interface from multiple data sources.</p>
<p>With this in mind, let's delve into the pros and cons of the federation, using GraphQL as our main context for the discussion. As you'll see, the benefits and pitfalls of federation are relevant, whether you're using GraphQL or not.</p>
<p>Federation is a concept that originates from the philosophy of microservices. This approach promotes the partitioning of large monolithic systems into smaller, more manageable components. In a federated architecture, instead of having a monolithic Backend-for-Frontend (BFF) handling all requests, you have multiple smaller BFFs that handle different aspects of the request.</p>
<p>Imagine a client makes a request to your system. This request still goes through an API gateway, which serves as the entry point to your system. However, instead of hitting a monolithic BFF, it now meets a BFF Router, specifically designed to understand and route requests to the appropriate BFFs.</p>
<p>The Router is smart. It understands the client's request and can break it down into smaller parts. It then delegates these smaller tasks to the appropriate services, each responsible for a specific aspect of the request. These services work in parallel, handling their part of the request, which often involves calling downstream microservices and orchestrating their responses.</p>
<p>Once the BFFs have finished their tasks, they send their responses back to the Router. The Router, in turn, takes these individual responses, combines them into a single response that fulfils the original request, and sends it back to the client.</p>
<p>This system, where individual services handle specific parts of a request in a coordinated manner, is often referred to as a Federation. The term "Apollo Federation" or "Super Graph" is commonly used to describe this setup when it's implemented with Apollo, a popular GraphQL implementation, but the concept is not limited to any specific technology or tool.</p>
<p><img decoding="async" loading="lazy" alt="BFF Federation Architecture" src="https://tailcall.run/assets/images/bff-federation-37fccede46429acf5aa4fc8853314c68.png" width="4267" height="2340" class="img_ev3q"></p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="federation-benefits">Federation Benefits<a class="hash-link" aria-label="Direct link to Federation Benefits" title="Direct link to Federation Benefits" href="https://tailcall.run/blog/unraveling-the-challenges-of-bff-federation/#federation-benefits">​</a></h2>
<p>Many large organizations using GraphQL in production have transitioned to this architecture to accommodate their scaling needs. The primary selling points of this architecture are:</p>
<ol>
<li>
<p><strong>Enhanced Team Ownership</strong>: GraphQL Federation fosters a sense of ownership among teams by allowing each team to own and maintain its GraphQL service. With Federation, teams can operate independently, focusing on their specific domain without worrying about the overall schema. This separation of concerns leads to more maintainable code, faster development cycles, and increased productivity. It empowers teams to work in parallel, each owning a piece of the larger schema while ensuring that the entire system operates as a cohesive whole. This significantly enhances team efficiency and collaboration, particularly in larger organizations with multiple teams working on different services. This alone is by far the most significant aspect of using GraphQL Federation.</p>
</li>
<li>
<p><strong>Incremental Adoption</strong>: A major advantage of GraphQL Federation is its ability to support incremental adoption. This means teams can gradually wrap their domain-specific microservices with a GraphQL layer, one at a time, and integrate it into the federated schema without disrupting the entire system. This flexible approach minimizes the impact on existing workflows and reduces the risks associated with large-scale changes.<br>
<!-- -->From the frontend perspective, GraphQL Federation offers a unified interface for querying the data. This simplifies the frontend code and enables the development of rich, interactive UIs with less effort. As soon as the first services are federated, frontend developers can begin transitioning their queries to the federated schema, reducing disruption and allowing for a smoother adoption process.<br>
<!-- -->This incremental approach also allows teams to evaluate and demonstrate the value of federation at each step, building confidence and promoting buy-in across the organization. It ensures teams are not overwhelmed by the complexity of new technology or architecture and can adjust their practices as they learn.</p>
</li>
</ol>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="federation-vs-bff">Federation vs BFF<a class="hash-link" aria-label="Direct link to Federation vs BFF" title="Direct link to Federation vs BFF" href="https://tailcall.run/blog/unraveling-the-challenges-of-bff-federation/#federation-vs-bff">​</a></h2>
<p><img decoding="async" loading="lazy" alt="BFF vs Federation" src="https://tailcall.run/assets/images/bff-vs-federation-7684785c9ae161b9b5377301b07079fe.png" width="1024" height="1024" class="img_ev3q"></p>
<p>It's not hard to see that GraphQL Federation carries some serious muscle over its monolithic adversary, the BFF. But before we declare a champion, let's take a few rounds to scrutinize the <a href="https://blog.tailcall.run/no-one-talks-about-api-orchestration#heading-highly-specialized" target="_blank" rel="noopener noreferrer">limitations</a> we've come across in our BFF solution, and see how the GraphQL Federation stands up under pressure. It's time for a head-to-head comparison!</p>
<ol>
<li>
<p><strong>Specialization</strong>: Both BFF and GraphQL Federation require a certain amount of manual intervention. In the BFF approach, the entire layer is custom-built, meaning there's no ready-to-use solution, which necessitates significant manual management. On the other hand, GraphQL Federation provides an open-source, ready-to-use Apollo Router. However, it's not an all-inclusive solution, as the individual GraphQL services still need to be manually maintained and written by hand for specific use cases. While it's still a tough fight, the federation manages to land a jab here and gets a few extra points in this round.</p>
</li>
<li>
<p><strong>Fragility</strong>: Federation offers an enhanced strategy. In a federated architecture, when a GraphQL service malfunction, only its segment of the graph becomes inaccessible to the user. This results in a more resilient system, less prone to total failure, demonstrating the ability to continue the fight even after taking a hit. In this round, Federation steps up and delivers a solid punch.</p>
</li>
<li>
<p><strong>Performance</strong>: When it comes to Performance, the Federation architecture introduces an extra journey for each packet. The request has to travel through the router, then to the individual GraphQL services, before finally reaching the domain service. This journey can add a few milliseconds of latency, a difference that may not be perceptible to the end user. However, this seemingly small delay has a broader impact on the performance of the entire architecture. The addition of the router introduces a requirement for more infrastructure and increases the frequency of data serialization and deserialization. This increased complexity affects both the system's throughput and infrastructure costs. In this round, the Federation architecture might not be the clear knockout winner we were hoping for.</p>
</li>
<li>
<p><strong>Monolith Tendency</strong>: It's a clear knockout in this round for the Federation! It elegantly sidesteps the monolith tendency, keeping the architecture agile and modular. BFF, in contrast, takes a heavy fall with its tendency to become a monolithic layer over time.</p>
</li>
<li>
<p><strong>Canary Release:</strong> Federation, unlike BFF, reveals graph dependencies and compatibility issues at runtime, not compile time. This amps up the need for first-class canary releases. However, when it comes to canary support, it's a draw. Both fighters are still in the ring, each showing resilience in their own way. No knockout here, folks!</p>
</li>
<li>
<p><strong>Coupled Release</strong>: In the Federation architecture, each GraphQL service operates independently, significantly reducing the coupling between services and the router. This independence allows each team to manage its own release cycles, putting an end to the wide-scale halts that were commonplace with the BFF layer. However, it's important to note that each GraphQL service still maintains a tight connection with its corresponding downstream domain service. While this is a form of coupling, it's considerably less invasive than the BFF approach, where the entire layer was intertwined. Despite this necessary connection to the domain services, the Federation architecture proves to be more agile. In this round, GraphQL Federation edges out the BFF approach.</p>
</li>
<li>
<p><strong>Organizational Friction:</strong> With Federation, the responsibility for managing the architecture often falls squarely on the shoulders of backend engineers. The reason is simple: the complexity of the architecture and its intimate ties with downstream domain services necessitate a deep level of technical understanding. This is a departure from the BFF paradigm, where frontend teams could claim ownership of this part of the infrastructure. The intricate nature of the Federation, however, makes this almost untenable. When put head-to-head with BFFs, the Federation seems to take a step back in this regard. The power to control abstraction slips away from the consumer. In this round, BFFs manage to hold their ground.</p>
</li>
<li>
<p><strong>Legacy Gateway:</strong> Just as in the BFF model, the API gateway maintains its place in the Federation architecture, and rightfully so. However, we find ourselves reestablishing a substantial amount of resiliency and caching logic within these new layers, duplicating efforts previously expended on a traditional gateway. This redundancy marks a lack of efficiency in the Federation approach, signaling a tie in this round.</p>
</li>
</ol>
<p>Overall, this round favors GraphQL Federation. It proves to be a significantly more robust architecture when evaluated based on the aforementioned criteria. Let's explore further and assess how it performs in isolation and as the company expands.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="pitfalls-of-graphql-federation">Pitfalls of GraphQL Federation<a class="hash-link" aria-label="Direct link to Pitfalls of GraphQL Federation" title="Direct link to Pitfalls of GraphQL Federation" href="https://tailcall.run/blog/unraveling-the-challenges-of-bff-federation/#pitfalls-of-graphql-federation">​</a></h2>
<p>While GraphQL Federation has numerous benefits, it is not without its downsides. Here are some points of caution that should be considered when deciding to use this architecture:</p>
<ol>
<li>
<p><strong>Cost and Complexity:</strong> GraphQL Federation introduces significant complexity into the architecture. Setting up, maintaining, and testing a federated graph can be a challenge as it requires a deep understanding of both GraphQL and distributed systems. Additionally, this architecture demands more infrastructure and a larger team for maintenance. As such, the adoption and migration process can be complex and costly. Typically, only large organizations with platform teams, robust budgets, and a governing body to maintain the schema's sanctity and system reliability, tend to consider adopting this approach. The inherent complexity and cost implications make the Federation a less likely choice for small to medium-sized organizations.</p>
</li>
<li>
<p><strong>Ownership Challenges:</strong> It is often argued that domain service owners maintain their individual GraphQL layers. However, this doesn't always reflect the reality. Services can frequently be divided or merged, leading to uncertainty about how to modify the GraphQL layer. This results in a complex web of requests from GraphQL services to domain services outside the team's control.</p>
</li>
<li>
<p><strong>Infrastructure Scaling:</strong> Each subgraph in a federated architecture operates on a separate piece of infrastructure, scaling independently. This brings its own set of challenges. For instance, when a subgraph is divided or merged, computing and scaling requirements need to be re-evaluated. Moreover, a deployment in another subgraph can trigger a substantial increase in load from the router on your subgraph, potentially causing unexpected stress on your infrastructure. This underscores the need for robust scaling and load-balancing strategies within a federated architecture.</p>
</li>
</ol>
<p>While GraphQL Federation has the potential to solve some issues of traditional BFF architecture, it brings in its own set of challenges. Therefore, it's important to evaluate these considerations based on the specific requirements and constraints of your project before deciding to implement this architecture.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="we-are-onto-something">We are onto something<a class="hash-link" aria-label="Direct link to We are onto something" title="Direct link to We are onto something" href="https://tailcall.run/blog/unraveling-the-challenges-of-bff-federation/#we-are-onto-something">​</a></h2>
<p>When examining the underlying issue, the debate essentially revolves around microservices and monoliths. Undoubtedly, the federated solution offers better scalability compared to a monolithic architecture; however, it also introduces a myriad of distinct challenges related to maintenance and costs that warrant careful consideration. This is not the end of the discussion, as client requests pass through CDNs and the Gateway before reaching the router, and we have yet to explore those components of the infrastructure. In the following sections, we will delve into these components and further investigate how they interact, as well as delve deeper into GraphQL.</p>]]></content>
        <author>
            <name>Tushar Mathur</name>
            <uri>https://github.com/tusharmath</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[No one talks about API Orchestration]]></title>
        <id>https://tailcall.run/blog/no-one-talks-about-api-orchestration/</id>
        <link href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/"/>
        <updated>2023-06-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A Forsaken Piece Of Every Microservice Architecture]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="bff-architecture.png" src="https://tailcall.run/assets/images/bff-architecture-a7202e41d6faa47b7ef3598111eb96eb.png" width="3616" height="2224" class="img_ev3q"></p>
<!-- -->
<p>Being in the industry for many years, building and consuming microservices, I have realized that there is one problem that no one really talks about when it comes to microservices ie. API Orchestration. As engineers, we love our microservices, small independent components that are responsible for doing just one thing. The promise that was sold when I was a kid was you can build these small independent services and compose them together to build an app, very fast and reliably. It took me years to realize that the necessary tooling for "composing" just doesn't exist! There are tools for distributed tracing, observability, caching, discovery, etc. But to compose services to build a product is completely offloaded to front-end engineers! There were two things that were happening in the tech ecosystem:</p>
<ol>
<li>
<p><strong>Rich User Interfaces:</strong> Responsive websites that worked on desktop and mobile are dead. To build a successful B2C business, you need to build for all three platforms viz. Android, iOS, and Web (Desktop/PWA). The applications need to look slick, rich in information, and have snappy response times. Development on multiple platforms requires a nuanced understanding of the stack and a lot of duplication of code.</p>
</li>
<li>
<p><strong>Microservice Proliferation:</strong> Companies these days bootstrap themselves on microservices instead of monoliths. This is because the tooling to build microservices has gotten a lot better, and reusable components are available either in open-source or as a SAAS solution. This allows developers to focus on their core business logic and move fast.</p>
</li>
</ol>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="microservice">Microservice<a class="hash-link" aria-label="Direct link to Microservice" title="Direct link to Microservice" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#microservice">​</a></h2>
<p>Microservices architecture is a design pattern in which a large application is built as a suite of modular services, each of which runs its process and communicates with other services through well-defined interfaces, typically using a lightweight messaging protocol. This approach has several benefits over a monolithic architecture, including improved scalability, resilience, and maintainability. In a microservices architecture, each service has a specific role and is independently deployable, so developers can work on different services in parallel and deploy them independently of each other. This can make the development process more agile and allow for faster deployment of new features.</p>
<p><img decoding="async" loading="lazy" alt="Microservices Architecture" src="https://tailcall.run/assets/images/microservices-architecture-06da5c15a584eb9591f25dac91c3f4fe.png" width="3010" height="2260" class="img_ev3q"></p>
<p>An API gateway is a server that acts as a single point of entry for certain types of requests. It can receive requests from the client, route them to the appropriate backend service, and then return the response from the backend service to the client. An API gateway can also perform tasks such as authentication, rate limiting, and caching. This makes it a useful component in a microservices architecture, where each service has its API and the API gateway acts as the "front door" for clients to access the services.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="api-composition">API Composition<a class="hash-link" aria-label="Direct link to API Composition" title="Direct link to API Composition" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#api-composition">​</a></h2>
<p>API composition refers to the process of combining multiple APIs to create a new API or a new functionality. This can be done by sending requests to multiple APIs and combining the results, or by creating a new API that acts as a façade for the underlying APIs.</p>
<blockquote>
<p>💡 API Composition is also known as API Orchestration. This is however vastly different from Microservice Orchestration.</p>
</blockquote>
<p>For example, consider a scenario where a client application wants to display a user's profile information and recent posts on a social media platform. In this case, the client can send two separate requests to two different APIs: one to retrieve the user's profile information, and another to retrieve their recent posts. The client can then combine the results from these two APIs to create a single response that contains all the required information. This new response can be considered as the output of the composed API.</p>
<p>To build a rich user interface, API composition is necessary on the client side. One of the main challenges with API composition on the client side is that it can lead to increased complexity in the client application. This is because the client needs to handle the process of sending requests to multiple APIs and combining the results, which can add to the overall size and complexity of the client code.</p>
<p>Another challenge with API composition on the client side is that it can result in reduced performance and increased latency. This is because the client needs to make multiple separate requests to different APIs, which can take more time and result in a slower response from the composed API.</p>
<p>In addition, API composition on the client side can also lead to increased security risks. This is because the client needs to handle sensitive information, such as API keys and authentication credentials, which can be vulnerable to attacks if not properly secured. The client doesn't have access to powerful CPUs or a reliable network either. This makes the composition problem even more challenging to implement and manage. It is therefore often more efficient and effective to perform API composition on the server side instead.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="backend-for-frontend">Backend For Frontend<a class="hash-link" aria-label="Direct link to Backend For Frontend" title="Direct link to Backend For Frontend" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#backend-for-frontend">​</a></h2>
<p>A BFF layer can help to solve the challenges of API composition by providing a separate backend service that is optimized for each specific frontend client. This can enable the BFF to perform API composition on behalf of the client, which can help to improve the performance and reliability of the composed API. The BFF layer typically sits as a separate component in the overall architecture, between the frontend client and the microservices. It can communicate with both the frontend client and the microservices using well-defined interfaces and protocols, such as REST or gRPC.</p>
<p>The BFF can take advantage of a powerful CPU and access to a fast network to improve the performance and reliability of the composed API. It can also provide added flexibility and control over the composition process. This can make it a useful tool for developers who want to create new APIs by combining the functionality of multiple underlying APIs.</p>
<p><img decoding="async" loading="lazy" alt="BFF Architecture" src="https://tailcall.run/assets/images/bff-architecture-a7202e41d6faa47b7ef3598111eb96eb.png" width="3616" height="2224" class="img_ev3q"></p>
<p>BFFs truly solve the problems mentioned above to a great extent, however they introduce new set of challenges viz.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="highly-specialized">Highly Specialized<a class="hash-link" aria-label="Direct link to Highly Specialized" title="Direct link to Highly Specialized" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#highly-specialized">​</a></h3>
<p>One of the challenges with using a BFF layer is that it is a highly specialized solution that requires a significant amount of hand-written code. Unlike an API gateway, there is no standard BFF solution that can be deployed out-of-the-box, and each BFF implementation must be custom-tailored to the specific requirements of the frontend client. This lack of standardization and reusability can make the BFF solution more complex and difficult to maintain.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="fragile">Fragile<a class="hash-link" aria-label="Direct link to Fragile" title="Direct link to Fragile" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#fragile">​</a></h3>
<p>Another challenge with using a BFF layer is that it can be fragile and susceptible to failure. The BFF solution is dependent on the developers to follow best practices and handle all error scenarios, and if these steps are not taken, the solution can be prone to bugs and performance issues. Additionally, the BFF solution must be thoroughly tested, including performance testing, unit testing, and integration testing, to ensure that it is reliable and performs well in production. This can require significant effort and expertise, and if these steps are not properly followed, the BFF solution can be fragile and prone to failure. Also, it's worth mentioning that a BFF layer is an entry point to all your backend, it going down basically means nothing is accessible for the user so this layer needs to be robust and resilient to exceptions.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="performance">Performance<a class="hash-link" aria-label="Direct link to Performance" title="Direct link to Performance" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#performance">​</a></h3>
<p>Because BFF layers are typically custom-written for each use case, it can be difficult to predict the performance impact of a small code change. Issues such as unoptimized algorithms, inefficient caching, and unnecessary downstream requests can go unnoticed and only be discovered very late in the development cycle. Typically companies perform thorough benchmarking and load testing before anything goes live. This results in a very high time to market even for minor changes.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="monolith">Monolith<a class="hash-link" aria-label="Direct link to Monolith" title="Direct link to Monolith" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#monolith">​</a></h3>
<p>Eventually, this layer turns out to be a big monolith touching every service in your backend. The layer contains a lot of handwritten spaghetti code that's hard to maintain. Onboarding new engineers also becomes harder and upgrading libraries or architecture gets costlier. Any tiny change requires a full-fledged deployment on your infrastructure.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="canary-support-or-lack-thereof">Canary Support (or lack thereof)<a class="hash-link" aria-label="Direct link to Canary Support (or lack thereof)" title="Direct link to Canary Support (or lack thereof)" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#canary-support-or-lack-thereof">​</a></h3>
<p>Every change that happens in the backend requires the deployment of the BFF layer. In fact, any feature that is built on the client also requires changes on the BFF layer. Such frequent changes can not be exposed to 100% of users because the reliability and performance of this system are unknown. A common way to solve this problem is to use <a href="https://www.redhat.com/en/topics/devops/what-is-blue-green-deployment" target="_blank" rel="noopener noreferrer">blue-green</a> deployments. This requires additional infrastructure and complex routing mechanisms. First-class support to do canary releases is very important and should be part of a modern BFF layer, however, most companies rely on DevOps for its support.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="coupled-release">Coupled Release<a class="hash-link" aria-label="Direct link to Coupled Release" title="Direct link to Coupled Release" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#coupled-release">​</a></h3>
<p>BFF layers can't be deployed independently since they act as a bridge between the clients and the services. Generally, the services need to go live first, and they need to make sure that the change is compatible with the current version of the BFF layer running in production. The interesting problem is in case there is a bug in the microservice and it needs to be reverted, even the BFF layer needs to be reverted. This kind of coupling makes it operationally very expensive to manage.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="organizational-friction">Organizational Friction<a class="hash-link" aria-label="Direct link to Organizational Friction" title="Direct link to Organizational Friction" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#organizational-friction">​</a></h3>
<p>The Backends for Frontends (BFF) pattern is designed to create a tailor-made backend service for each user interface (e.g., desktop, mobile, etc.), with the aim of simplifying the client-side and improving the user experience.</p>
<p>However, in practice, this architecture sometimes creates friction within the organization, particularly when BFFs are developed and maintained by the backend team. Here are a few reasons why:</p>
<ol>
<li>
<p><strong>Communication and Responsiveness:</strong> As the backend team is typically in charge of the BFF, front-end teams often have to wait for them to make necessary changes. This slows down the development process, especially when backlogs are high or priorities differ.</p>
</li>
<li>
<p><strong>Different Skillsets:</strong> Backend and frontend developers often specialize in different programming languages and paradigms. If the backend team is in charge of the BFF, they might not be as comfortable or efficient at dealing with issues that are more closely related to the frontend.</p>
</li>
<li>
<p><strong>Lack of Ownership:</strong> Frontend teams often feel that they lack ownership and control over the part of the system that directly impacts their work. This leads to decreased motivation and productivity.</p>
</li>
</ol>
<p>One potential solution to these issues is to shift the ownership of the BFFs to the front-end teams. Since these teams are the primary consumers of the BFFs, they could be better placed to design, implement, and maintain them. This would not only empower the front-end teams but also free up backend teams to focus on their core responsibilities.</p>
<p>However, this solution is not without its own challenges. For one, front-end teams would need to upskill to handle their new responsibilities. Also, the organization would need to ensure that there are clear lines of communication between the front-end and backend teams, so that any changes to shared resources can be coordinated effectively.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="legacy-gateway">Legacy Gateway<a class="hash-link" aria-label="Direct link to Legacy Gateway" title="Direct link to Legacy Gateway" href="https://tailcall.run/blog/no-one-talks-about-api-orchestration/#legacy-gateway">​</a></h3>
<p>BFF layers often end up implementing some of the cross-cutting concerns of an API gateway such as rate limiting, authentication, throttling, etc. This makes its purpose quite confusing in the sense that do we need an API gateway if we are using a BFF layer. Moreover, it's not very clear if we use an API gateway with a BFF layer, where should we place it? Should we place it between the clients and the BFF layer or the BFF layer and the service mesh? These are subjective decisions that each company ends up making as there is no standard way of doing this. However, it's worth mentioning that legacy gateways do introduce a gap that's being attempted to be filled by a BFF layer.</p>
<blockquote>
<p>BFF, Presentation Layer, Facade, Middleware, UI Layer, Orchestration Layer, API Adapter — Are all different nomenclatures used for the same thing.</p>
</blockquote>
<p>To summarize, BFFs do indeed address the issues of API orchestration to a significant extent; however, they also present a new set of challenges for organizations to tackle. Clearly, there is more to the story. In our <a href="https://blog.tailcall.run/unraveling-the-challenges-of-bff-federation" target="_blank" rel="noopener noreferrer">next blog post</a>, we will discuss some of the solutions that large organizations with unlimited budgets have implemented to overcome this problem. So, please subscribe if you haven't already.</p>]]></content>
        <author>
            <name>Tushar Mathur</name>
            <uri>https://github.com/tusharmath</uri>
        </author>
    </entry>
</feed>
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2564],{94713:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(74848),o=n(28453);const r={title:"Unraveling the Challenges of BFF Federation",authors:[{name:"Tushar Mathur",title:"CEO @ Tailcall | Love to talk about programming, scale, distributed systems and building high performance systems.",url:"https://github.com/tusharmath",image_url:"https://avatars.githubusercontent.com/u/194482?v=4",description:"A different take on GraphQL Federation."}],image:"/images/blog/bff-cover.png",hide_table_of_contents:!0,slug:"unraveling-the-challenges-of-bff-federation"},s=void 0,i={permalink:"/blog/unraveling-the-challenges-of-bff-federation",source:"@site/blog/bff-challenges-2023-06-19.md",title:"Unraveling the Challenges of BFF Federation",description:"Cover Image for Unraveling the Challenges of BFF Federation",date:"2023-06-19T00:00:00.000Z",tags:[],readingTime:10.425,hasTruncateMarker:!0,authors:[{name:"Tushar Mathur",title:"CEO @ Tailcall | Love to talk about programming, scale, distributed systems and building high performance systems.",url:"https://github.com/tusharmath",image_url:"https://avatars.githubusercontent.com/u/194482?v=4",description:"A different take on GraphQL Federation.",imageURL:"https://avatars.githubusercontent.com/u/194482?v=4"}],frontMatter:{title:"Unraveling the Challenges of BFF Federation",authors:[{name:"Tushar Mathur",title:"CEO @ Tailcall | Love to talk about programming, scale, distributed systems and building high performance systems.",url:"https://github.com/tusharmath",image_url:"https://avatars.githubusercontent.com/u/194482?v=4",description:"A different take on GraphQL Federation.",imageURL:"https://avatars.githubusercontent.com/u/194482?v=4"}],image:"/images/blog/bff-cover.png",hide_table_of_contents:!0,slug:"unraveling-the-challenges-of-bff-federation"},unlisted:!1,prevItem:{title:"The truth about scaling Automatic Persisted Queries",permalink:"/blog/2023/08/11/automatic-persisted-queries-"},nextItem:{title:"No one talks about API Orchestration",permalink:"/blog/no-one-talks-about-api-orchestration"}},l={authorsImageUrls:[void 0]},c=[];function h(e){const t={a:"a",img:"img",p:"p",...(0,o.R)(),...e.components};return(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.img,{alt:"Cover Image for Unraveling the Challenges of BFF Federation",src:n(29691).A+"",width:"1600",height:"840"}),"\nIn our ",(0,a.jsx)(t.a,{href:"https://blog.tailcall.run/no-one-talks-about-api-orchestration",children:"previous"})," blog post, we discussed the challenges of API Orchestration and its often overlooked role in a microservices architecture. We explored how, while it serves as an abstraction for frontend apps and websites, this abstraction's performance is very sensitive to network latency and device performance thus directly impacting end-user experience. One proposed solution was to create a Backend for Frontend (BFF) layer, essentially moving the frontend abstraction to powerful servers within your VPC. Although this approach effectively addresses the user experience problem and simplifies the work of front-end engineers, it introduces a new set of challenges for the backend, leading to difficulties in scaling the monolithic solution. Here's what the BFF architecture looked like:"]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},29691:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/bff-cover-591717954e6cfda4e001dc14b9914060.png"},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(96540);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);
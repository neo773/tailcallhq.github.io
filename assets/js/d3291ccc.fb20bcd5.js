"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5797],{9906:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=s(5893),i=s(1151);const r={title:"N+1 Problem",description:"Discover how to efficiently address the N+1 problem in application development with our comprehensive guide. Learn to reduce server requests and optimize performance using practical solutions and step-by-step examples with the TailCall CLI for GraphQL applications. Enhance your coding practices and ensure scalable, high-performance web applications by mastering techniques to mitigate the N+1 problem, reduce server load, and improve response times."},a=void 0,o={id:"guides/n+1",title:"N+1 Problem",description:"Discover how to efficiently address the N+1 problem in application development with our comprehensive guide. Learn to reduce server requests and optimize performance using practical solutions and step-by-step examples with the TailCall CLI for GraphQL applications. Enhance your coding practices and ensure scalable, high-performance web applications by mastering techniques to mitigate the N+1 problem, reduce server load, and improve response times.",source:"@site/docs/guides/n+1.md",sourceDirName:"guides",slug:"/guides/n+1",permalink:"/docs/guides/n+1",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/guides/n+1.md",tags:[],version:"current",frontMatter:{title:"N+1 Problem",description:"Discover how to efficiently address the N+1 problem in application development with our comprehensive guide. Learn to reduce server requests and optimize performance using practical solutions and step-by-step examples with the TailCall CLI for GraphQL applications. Enhance your coding practices and ensure scalable, high-performance web applications by mastering techniques to mitigate the N+1 problem, reduce server load, and improve response times."},sidebar:"tutorialSidebar",previous:{title:"Logging",permalink:"/docs/guides/logging"},next:{title:"Playground",permalink:"/docs/guides/playground"}},l={},c=[{value:"Example",id:"example",level:2},{value:"Fetching Posts",id:"fetching-posts",level:3},{value:"Fetching Authors",id:"fetching-authors",level:3},{value:"Initial Configuration",id:"initial-configuration",level:2},{value:"Reviewing the logs",id:"reviewing-the-logs",level:2},{value:"Optimized Configuration",id:"optimized-configuration",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"N+1 problem"})," significantly impacts application performance by triggering numerous upstream requests in response to a single downstream request. Let's explore this issue and potential solutions using an example."]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["Imagine we need to fetch data from the ",(0,t.jsx)(n.a,{href:"https://jsonplaceholder.typicode.com/",children:"jsonplaceholder.typicode.com"}),", requiring both posts and their authors' details."]}),"\n",(0,t.jsx)(n.h3,{id:"fetching-posts",children:"Fetching Posts"}),"\n",(0,t.jsx)(n.p,{children:"First, we request all posts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\u276f curl https://jsonplaceholder.typicode.com/posts\n  [\n    {\n      "userId": 1,\n      "id": 1,\n      "title": "Creating Solutions for Challenges",\n      "body": "We anticipate and understand challenges, creating solutions while considering exceptions and criticisms."\n    },\n    {\n      "userId": 1,\n      "id": 2,\n      "title": "Understanding Identity",\n      "body": "Life\'s essence, measured through time, presents pains and joys. We find solace in the mundane, seeking meaning beyond the visible."\n    }\n  ]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This command retrieves posts from the API, with each post containing a ",(0,t.jsx)(n.code,{children:"userId"})," field indicating its author."]}),"\n",(0,t.jsx)(n.h3,{id:"fetching-authors",children:"Fetching Authors"}),"\n",(0,t.jsx)(n.p,{children:"Next, we fetch details for each post's author, such as:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'\u276f curl https://jsonplaceholder.typicode.com/users/1\n  {\n    "id": 1,\n    "name": "Leanne Graham",\n    "username": "Bret",\n    "email": "Sincere@april.biz",\n    "address": {\n      "street": "Kulas Light",\n      "suite": "Apt. 556",\n      "city": "Gwenborough",\n      "zipcode": "92998-3874",\n      "geo": {\n        "lat": "-37.3159",\n        "lng": "81.1496"\n      }\n    },\n    "phone": "1-770-736-8031 x56442",\n    "website": "hildegard.org",\n    "company": {\n      "name": "Romaguera-Crona",\n      "catchPhrase": "Multi-layered client-server neural-net",\n      "bs": "harness real-time e-markets"\n    }\n  }\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For 100 posts, this results in 100 additional requests for author details, totaling 101 requests. This is the infamous ",(0,t.jsx)(n.em,{children:"N + 1 problem"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["1 request for ",(0,t.jsx)(n.code,{children:"/posts"})]}),"\n",(0,t.jsxs)(n.li,{children:["100 or ",(0,t.jsx)(n.code,{children:"N"})," requests for ",(0,t.jsx)(n.code,{children:"/users/:id"})," for each user"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"This issue can escalate in real-world scenarios, leading to straining resources, increasing server costs, slowing response times, and potentially causing server downtime even at a moderate scale."})}),"\n",(0,t.jsx)(n.p,{children:"Addressing the N+1 problem during application design and development is crucial for efficient API usage. We will examine solutions to mitigate this problem using Tailcall."}),"\n",(0,t.jsx)(n.h2,{id:"initial-configuration",children:"Initial Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Before diving into solutions, let's observe the N+1 problem in the following configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",children:'schema\n  @server(port: 8000)\n  @upstream(\n    baseURL: "http://jsonplaceholder.typicode.com"\n  ) {\n  query: Query\n}\n\ntype Query {\n  posts: [Post] @http(path: "/posts")\n}\n\ntype Post {\n  id: Int!\n  userId: Int!\n  title: String!\n  body: String!\n  user: User @http(path: "/users/{{.value.userId}}")\n}\n\ntype User {\n  id: Int!\n  name: String!\n  username: String!\n  email: String!\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This configuration sets up a GraphQL schema for a Tailcall server operating on port ",(0,t.jsx)(n.code,{children:"8000"}),", utilizing ",(0,t.jsx)(n.a,{href:"https://jsonplaceholder.typicode.com/",children:"jsonplaceholder.typicode.com"})," as its data source. It allows direct querying of posts and, for each post, retrieves the associated author information. Similar to our curl requests above, when we query for posts and their authors we end up issuing multiple user calls upstream:"]}),"\n",(0,t.jsxs)(n.p,{children:["Let's examine the CLI output for this configuration with Tailcall's ",(0,t.jsx)(n.code,{children:"start"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",metastring:"{6-9}",children:"\u276f tailcall start ./examples/jsonplaceholder.graphql\n  INFO File read: ./examples/jsonplaceholder.graphql ... ok\n  INFO N + 1 detected: 1\n  INFO \ud83d\ude80 Tailcall launched at [0.0.0.0:8000] over HTTP/1.1\n  INFO \ud83c\udf0d Playground: https://tailcall.run/playground/?u=http://127.0.0.1:8000/graphql\n  INFO GET http://jsonplaceholder.typicode.com/posts HTTP/1.1\n  INFO GET http://jsonplaceholder.typicode.com/users/8 HTTP/1.1\n  ...\n  INFO GET http://jsonplaceholder.typicode.com/users/10 HTTP/1.1\n"})}),"\n",(0,t.jsx)(n.p,{children:"Tailcall logs a sequence of requests made to fetch posts and then individual users, highlighting the N+1 problem in real-time. Even though there are 100 posts, only 10 requests are made to fetch the authors. This happens because Tailcall automatically deduplicates all upstream requests. However, it still issues 10 requests, which is not bad but we can do better."}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Tailcall can look into your configuration and identify optimizations such as deduplications automatically. You can disable this behavior with the ",(0,t.jsx)(n.a,{href:"/docs/directives/upstream#dedupe",children:"dedupe"})," setting."]})}),"\n",(0,t.jsx)(n.h2,{id:"reviewing-the-logs",children:"Reviewing the logs"}),"\n",(0,t.jsx)(n.p,{children:"Before we get into batching, if you observe closely the above logs Tailcall identified that there was one N + 1 issue, even before the requests were made:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",metastring:"{3}",children:"\u276f tailcall start ./examples/jsonplaceholder.graphql\n  INFO File read: ./examples/jsonplaceholder.graphql ... ok\n  INFO N + 1 detected: 1\n  INFO \ud83d\ude80 Tailcall launched at [0.0.0.0:8000] over HTTP/1.1\n  INFO \ud83c\udf0d Playground: https://tailcall.run/playground/?u=http://127.0.0.1:8000/graphql\n  INFO GET http://jsonplaceholder.typicode.com/posts HTTP/1.1\n  INFO GET http://jsonplaceholder.typicode.com/users/8 HTTP/1.1\n  ...\n  INFO GET http://jsonplaceholder.typicode.com/users/10 HTTP/1.1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To get a deeper understanding of what this N + 1 issue is, we can use the ",(0,t.jsx)(n.code,{children:"--n-plus-one-queries"})," parameter with the ",(0,t.jsx)(n.code,{children:"check"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",metastring:"{4,5}",children:"\u276f tailcall check ./jsonplaceholder.graphql --n-plus-one-queries\n  INFO File read: ./examples/jsonplaceholder.graphql ... ok\n  INFO Config ./examples/jsonplaceholder.graphql ... ok\n  INFO N + 1 detected: 1\n  query { posts { user } }\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Incredible, isn't it? Tailcall has discovered that querying for posts followed by their users results in N + 1 upstream calls. This represents a significant productivity gain, as you can now identify all such N + 1 issues upfront without resorting to complex profiling, tracing, or other runtime techniques. The ",(0,t.jsx)(n.code,{children:"check"})," command identifies the minimal query that could lead to an N + 1 problem by performing semantic analysis of your configuration."]}),"\n",(0,t.jsx)(n.h2,{id:"optimized-configuration",children:"Optimized Configuration"}),"\n",(0,t.jsx)(n.p,{children:"An effective technique to mitigate the N+1 problem is batching similar requests, significantly reducing the number of server calls. The TailCall CLI provides this capability for addressing the N+1 issue in GraphQL."}),"\n",(0,t.jsxs)(n.p,{children:["To utilize this feature, edit the ",(0,t.jsx)(n.code,{children:"@http"})," directive on ",(0,t.jsx)(n.code,{children:"Post.user"})," in your GraphQL schema as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",metastring:"{9-10}",children:'type Post {\n  id: Int!\n  userId: Int!\n  title: String!\n  body: String!\n  user: User\n    @http(\n      path: "/users"\n      query: [{key: "id", value: "{{value.userId}}"}]\n      batchKey: ["id"]\n    )\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The described changes introduce two significant tweaks to the ",(0,t.jsx)(n.code,{children:"@http"})," directive:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Addition of a query parameter:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",metastring:"{6}",children:'type Post {\n  # ...\n  user: User\n    @http(\n      path: "/users"\n      query: [{key: "id", value: "{{value.userId}}"}]\n      batchKey: ["id"]\n    )\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This configuration generates a URL aligning the user ID with the ",(0,t.jsx)(n.code,{children:"userId"})," from the parent ",(0,t.jsx)(n.code,{children:"Post"}),". For a batch of posts, the CLI compiles a single URL, such as ",(0,t.jsx)(n.code,{children:"/users?id=1&id=2&id=3...id=10"}),", consolidating the requests into one."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Addition of a batchKey:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",metastring:"{7}",children:'type Post {\n  # ...\n  user: User\n    @http(\n      path: "/users"\n      query: [{key: "id", value: "{{value.userId}}"}]\n      batchKey: ["id"]\n    )\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This parameter instructs the system to convert the list of responses into a map using the user's ",(0,t.jsx)(n.code,{children:"id"})," as the unique key, allowing differentiation of each user value in the response list."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Using this approach, you can reduce the number of requests from 11 (for 10 users, plus one initial request for the post) down to 2. This small change effectively addresses the N+1 problem. Let's see what the server logs when you now start with this updated configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-graphql",metastring:"{21-22}",children:'schema\n  @server(port: 8000)\n  @upstream(\n    baseURL: "http://jsonplaceholder.typicode.com"\n  ) {\n  query: Query\n}\n\ntype Query {\n  posts: [Post] @http(path: "/posts")\n}\n\ntype Post {\n  id: Int!\n  userId: Int!\n  title: String!\n  body: String!\n  user: User\n    @http(\n      path: "/users"\n      query: [{key: "id", value: "{{value.userId}}"}]\n      batchKey: ["id"]\n    )\n}\n\ntype User {\n  id: Int!\n  name: String!\n  username: String!\n  email: String!\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",metastring:"{3}",children:"\u276f tailcall start ./examples/jsonplaceholder.graphql\n  INFO File read: ./examples/jsonplaceholder.graphql ... ok\n  INFO N + 1 detected: 0\n  INFO \ud83d\ude80 Tailcall launched at [0.0.0.0:8000] over HTTP/1.1\n  INFO \ud83c\udf0d Playground: https://tailcall.run/playground/?u=http://127.0.0.1:8000/graphql\n  INFO GET http://jsonplaceholder.typicode.com/posts HTTP/1.1\n  INFO GET http://jsonplaceholder.typicode.com/users?id=1&id=10&id=2&id=3&id=4&id=5&id=6&id=7&id=8&id=9 HTTP/1.1\n"})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["The logs clearly demonstrate a substantial reduction in requests. Initially, fetching 100 posts resulted in an additional 100 requests for author details, totaling 101 requests. However, after deduping and applying TailCall optimization with batching using the ",(0,t.jsx)(n.code,{children:"batchKey"}),", we observed that only two requests were made. TailCall intelligently merged upstream requests and utilized the batch API configured by the user."]}),"\n",(0,t.jsx)(n.p,{children:"This optimization significantly contrasts with the initial approach by reducing the number of server requests, thereby minimizing server load, enhancing response times, and potentially lowering server costs. It underscores the effectiveness of Tailcall in addressing the N+1 problem through thoughtful schema design and the use of advanced semantic analysis techniques."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var t=s(7294);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6105],{2039:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=t(5893),i=t(1151);const a={title:"@const"},o=void 0,r={id:"operators/const",title:"@const",description:"The @const directive in GraphQL is a powerful tool for embedding data directly into your schema, offering two primary functionalities:",source:"@site/docs/operators/const.md",sourceDirName:"operators",slug:"/operators/const",permalink:"/docs/operators/const",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/operators/const.md",tags:[],version:"current",frontMatter:{title:"@const"},sidebar:"tutorialSidebar",previous:{title:"@cache",permalink:"/docs/operators/cache"},next:{title:"@graphQL",permalink:"/docs/operators/graphql"}},c={},l=[];function d(e){const n={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"@const"})," directive in GraphQL is a powerful tool for embedding data directly into your schema, offering two primary functionalities:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Static Response"}),": This feature allows for the inclusion of a constant response within the schema definition itself. It is useful for scenarios where the response is static and unchanging. e.g:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'schema {\n  query: Query\n}\n\ntype Query {\n  user: User @const(data: {name: "John", age: 12})\n}\n\ntype User {\n  name: String\n  age: Int\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"The const operator also checks the provided value at compile time to ensure it matches the field's schema. If not, the console displays a descriptive error message."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Template"}),": Beyond static data embedding, the ",(0,s.jsx)(n.code,{children:"@const"})," directive extends its utility to support dynamic data injection through Mustache template syntax. This feature enables the use of placeholders within the constant data, which are then dynamically replaced with actual values at runtime. It supports both scalar values and complex objects, including lists and nested objects, offering flexibility in tailoring responses to specific needs. e.g:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'schema {\n  query: Query\n}\n\ntype Query {\n  user: User @const(data: {name: "John", workEmail: "john@xyz.com", personalEmail: "john@xyz.com"})\n}\n\ntype User {\n  name: String\n  age: Int\n  personalEmail: String\n  workEmail: String\n  emails: Emails @const(data: {emails: {workEmail: "{{value.workEmail}}", personalEmail: "{{value.personalEmail}}"}})\n}\n\ntype Emails {\n  workEmail: String\n  personalEmail: String\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the ",(0,s.jsx)(n.code,{children:"@const"})," directive dynamically generate an ",(0,s.jsx)(n.code,{children:"Emails"})," object based on the provided template data. The placeholders within the template (",(0,s.jsx)(n.code,{children:"{{value.workEmail}}"})," and ",(0,s.jsx)(n.code,{children:"{{value.personalEmail}}"}),") gets replaced with the actual values specified in the ",(0,s.jsx)(n.code,{children:"User"})," type, allowing for dynamic content generation while still adhering to the schema's structure."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var s=t(7294);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);
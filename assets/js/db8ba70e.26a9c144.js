"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2354],{1640:e=>{e.exports=JSON.parse('{"pluginId":"developers","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Bounty","href":"/developers/bounty","docId":"bounty","unlisted":false},{"type":"link","label":"Guidelines","href":"/developers/","docId":"guidelines","unlisted":false},{"type":"link","label":"Integration Testing","href":"/developers/integration-testing","docId":"integration-testing","unlisted":false},{"type":"link","label":"Micro Benchmarks","href":"/developers/micro-benchmark","docId":"micro-benchmark","unlisted":false},{"type":"link","label":"Mutability","href":"/developers/mutability","docId":"mutability","unlisted":false},{"type":"link","label":"Telemetry","href":"/developers/telemetry","docId":"telemetry","unlisted":false},{"type":"link","label":"Unit Testing","href":"/developers/testing","docId":"testing","unlisted":false},{"type":"link","label":"Macro Benchmarks","href":"/developers/wrk-benchmark","docId":"wrk-benchmark","unlisted":false}]},"docs":{"bounty":{"id":"bounty","title":"Bounty","description":"This guide outlines the Tailcall Bounty Program, emphasizing quick, high-quality contributions and collaborative engagement through challenges and rewards. It provides essential participation rules and encourages active community involvement for innovation and excellence.","sidebar":"tutorialSidebar"},"guidelines":{"id":"guidelines","title":"Guidelines","description":"Explore how to contribute to the Tailcall project with this SEO-optimized guide. Learn the best practices for collaborating effectively, from forking and setting up your environment with tools like Rust and Prettier, to making incremental changes and engaging in community discussions. This document outlines key steps like creating new branches, submitting pull requests, and ensuring high code quality. Whether you\'re discussing on Discord or pushing changes, these guidelines ensure a smooth process. Perfect for developers looking to contribute to a thriving, respectful, and inclusive community. Join and enhance the Tailcall project today!","sidebar":"tutorialSidebar"},"integration-testing":{"id":"integration-testing","title":"Integration Testing","description":"Discover Tailcall\'s innovative markdown-based snapshot testing framework, designed to enhance testing across various programming languages seamlessly. This framework focuses on simplicity and maintainability, utilizing Markdown to make test cases easy to write and understand. Tailored for users of Tailcall, the framework supports extensive testing of GraphQL backends without language constraints. Features include detailed instructions on running and filtering tests, a structured test syntax guide, and comprehensive sections on test processes and snapshot maintenance. Ideal for developers seeking a straightforward, language-agnostic testing solution. Learn more about implementing and maintaining effective tests with Tailcall\'s unique approach.","sidebar":"tutorialSidebar"},"micro-benchmark":{"id":"micro-benchmark","title":"Micro Benchmarks","description":"Explore Tailcall\'s comprehensive guide to benchmarking for continuous integration (CI) systems. Learn how to seamlessly integrate and run performance tests on every commit to the main branch using Criterion. The guide covers installation of essential tools like cargo-criterion and rust-script, provides step-by-step instructions for executing benchmarks, and details procedures for comparing benchmark results across different code branches. Ensure code efficiency and detect performance degradations early with Tailcall\'s benchmarking strategies, essential for developers seeking to maintain and improve software performance consistently. Visit the complete guide to start optimizing your CI pipeline today.","sidebar":"tutorialSidebar"},"mutability":{"id":"mutability","title":"Mutability","description":"Explore best practices for handling mutability in programming with our detailed guide. Learn when to use references versus ownership in functions with clear examples. This guideline helps developers optimize their code for better performance and clarity, especially in performance-sensitive environments. Ideal for contributors and programmers looking to refine their coding techniques and understanding of mutability.","sidebar":"tutorialSidebar"},"telemetry":{"id":"telemetry","title":"Telemetry","description":"Discover how to elevate application observability with Tailcall\'s comprehensive guide on implementing telemetry using the OpenTelemetry specification. This guide provides a detailed overview of using Rust crates such as rust-opentelemetry, tracing, and tracing-opentelemetry for effective data collection and export. It includes specific examples and best practices for tracing significant operations, naming spans accurately, and adhering to semantic conventions. Perfect for developers seeking to enhance monitoring and debugging capabilities in their applications, this resource is your go-to for integrating advanced observability features efficiently. Learn more about how to optimize your development process by visiting Tailcall\'s contributor guidelines.","sidebar":"tutorialSidebar"},"testing":{"id":"testing","title":"Unit Testing","description":"Discover the Tailcall\'s Testing Guidelines designed for contributors. This guide covers our testing approach, how to run and write tests, and tips for troubleshooting. It\'s a straightforward resource for developers at any level aiming to contribute effectively and maintain high-quality code in Tailcall","sidebar":"tutorialSidebar"},"wrk-benchmark":{"id":"wrk-benchmark","title":"Macro Benchmarks","description":"Learn how to benchmark a Tailcall server using `wrk` with this comprehensive guide. Discover the steps for building your project in release mode, starting the server with controlled log output, and using `wrk` with a custom Lua script for precise benchmarking. This tutorial also covers how to verify server responsiveness with `curl` and how to interpret benchmark results to assess server performance under load. Perfect for developers looking to optimize their Rust applications.","sidebar":"tutorialSidebar"}}}')}}]);
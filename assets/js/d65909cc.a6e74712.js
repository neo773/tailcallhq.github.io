"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[32],{45970:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var i=a(74848),s=a(28453);const n={title:"How Tailcall statically identifies N+1 issues in GraphQL",authors:[{name:"Tushar Mathur",title:"CEO @ Tailcall | Love to talk about programming, scale, distributed systems, and building high-performance systems.",url:"https://github.com/tusharmath",image_url:"https://avatars.githubusercontent.com/u/194482?v=4"}],description:"A deep dive into the implementation details of the N+1 tracker",slug:"tailcall-n+1-identification-algorithm"},r=void 0,l={permalink:"/blog/tailcall-n+1-identification-algorithm",source:"@site/blog/tailcall-n+1-working-2024-08-04.md",title:"How Tailcall statically identifies N+1 issues in GraphQL",description:"A deep dive into the implementation details of the N+1 tracker",date:"2024-08-04T00:00:00.000Z",tags:[],readingTime:4.62,hasTruncateMarker:!0,authors:[{name:"Tushar Mathur",title:"CEO @ Tailcall | Love to talk about programming, scale, distributed systems, and building high-performance systems.",url:"https://github.com/tusharmath",image_url:"https://avatars.githubusercontent.com/u/194482?v=4",imageURL:"https://avatars.githubusercontent.com/u/194482?v=4"}],frontMatter:{title:"How Tailcall statically identifies N+1 issues in GraphQL",authors:[{name:"Tushar Mathur",title:"CEO @ Tailcall | Love to talk about programming, scale, distributed systems, and building high-performance systems.",url:"https://github.com/tusharmath",image_url:"https://avatars.githubusercontent.com/u/194482?v=4",imageURL:"https://avatars.githubusercontent.com/u/194482?v=4"}],description:"A deep dive into the implementation details of the N+1 tracker",slug:"tailcall-n+1-identification-algorithm"},unlisted:!1,nextItem:{title:"GraphQL in Vue: 5 Best Approaches for Data Fetching",permalink:"/blog/graphql-vue-client"}},o={authorsImageUrls:[void 0]},c=[];function u(t){const e={a:"a",img:"img",p:"p",...(0,s.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["As a developer working with GraphQL, you're likely familiar with the concept of N+1 issues, if not you should definitely check out our ",(0,i.jsx)(e.a,{href:"/docs/graphql-n-plus-one-problem-solved-tailcall",children:"N+1 guide"}),"."]}),"\n",(0,i.jsx)(e.p,{children:"To summarize they occur when a GraphQL resolver is called multiple times for a single GraphQL request, leading a large set of requests upstream and overall a slower query execution. In this blog post, we'll dive into how Tailcall specifically identifies N+1 issues in GraphQL, and explore the algorithm and data structures used to detect these issues."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{alt:"Actual Usage Image",src:a(82212).A+"",width:"3232",height:"984"})})]})}function h(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(u,{...t})}):u(t)}},82212:(t,e,a)=>{a.d(e,{A:()=>i});const i=a.p+"assets/images/n+1-image-terminal-2bfbafada99d3c089f9d703c60855bef.png"},28453:(t,e,a)=>{a.d(e,{R:()=>r,x:()=>l});var i=a(96540);const s={},n=i.createContext(s);function r(t){const e=i.useContext(n);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function l(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:r(t.components),i.createElement(n.Provider,{value:e},t.children)}}}]);
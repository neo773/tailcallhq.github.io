"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5533],{3150:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(5893),i=n(1151);const r={title:"Telemetry",description:"Discover how to enhance application performance with our guide on enabling and analyzing telemetry data in Tailcall. Learn to configure observability support using OpenTelemetry for insights into logs, metrics, and traces, with practical integration examples for platforms like Honeycomb.io, New Relic, and Datadog."},a=void 0,s={id:"guides/telemetry",title:"Telemetry",description:"Discover how to enhance application performance with our guide on enabling and analyzing telemetry data in Tailcall. Learn to configure observability support using OpenTelemetry for insights into logs, metrics, and traces, with practical integration examples for platforms like Honeycomb.io, New Relic, and Datadog.",source:"@site/docs/guides/telemetry.md",sourceDirName:"guides",slug:"/guides/telemetry",permalink:"/docs/guides/telemetry",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/guides/telemetry.md",tags:[],version:"current",frontMatter:{title:"Telemetry",description:"Discover how to enhance application performance with our guide on enabling and analyzing telemetry data in Tailcall. Learn to configure observability support using OpenTelemetry for insights into logs, metrics, and traces, with practical integration examples for platforms like Honeycomb.io, New Relic, and Datadog."},sidebar:"tutorialSidebar",previous:{title:"Tailcall on AWS",permalink:"/docs/guides/tailcall-on-aws"},next:{title:"Watch Mode",permalink:"/docs/guides/watch-mode"}},l={},c=[{value:"What is Observability",id:"what-is-observability",level:2},{value:"Comparison with Apollo Studio",id:"comparison-with-apollo-studio",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Tailcall config",id:"tailcall-config",level:2},{value:"Export to OTLP",id:"export-to-otlp",level:3},{value:"OpenTelemetry Collector",id:"opentelemetry-collector",level:4},{value:"Export to prometheus",id:"export-to-prometheus",level:3},{value:"Data generated",id:"data-generated",level:2},{value:"Relation with other services",id:"relation-with-other-services",level:3},{value:"Customize generated data",id:"customize-generated-data",level:3},{value:"Examples",id:"examples",level:2},{value:"Honeycomb.io",id:"honeycombio",level:3},{value:"New Relic",id:"new-relic",level:3},{value:"Datadog",id:"datadog",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"This guide will walk you through observability support in Tailcall i.e. how to collect and analyze telemetry data with different observability backends. In this guide you'll learn:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"How to enable generation of telemetry data in Tailcall?"}),"\n",(0,o.jsx)(t.li,{children:"How to update config to forward telemetry data to your chosen observability platforms?"}),"\n",(0,o.jsx)(t.li,{children:"See some examples of integration with existing observability tools?"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Let's get started!"}),"\n",(0,o.jsx)(t.h2,{id:"what-is-observability",children:"What is Observability"}),"\n",(0,o.jsx)(t.p,{children:"Observability is essential for maintaining the health and performance of your applications. It provides insights into your software's operation in real-time by analyzing telemetry data \u2014 logs, metrics, and traces. This data helps in troubleshooting, optimizing, and ensuring your application works as expected."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Logs"})," offer a record of events that have happened within your application, useful for understanding actions taken or errors that have occurred."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Metrics"})," are numerical data that measure different aspects of your system's performance, such as request rates or memory usage."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Traces"})," show the journey of requests through your system, highlighting how different parts of your application interact and perform."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Tailcall provides observability support by integrating OpenTelemetry specification into it with help of provided SDKs and data formats."}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://opentelemetry.io",children:"OpenTelemetry"})," is a toolkit for collecting telemetry data in a consistent manner across different languages and platforms. It frees you from being locked into a single observability platform, allowing you to send your data to different tools for analysis, such as New Relic or Honeycomb."]}),"\n",(0,o.jsx)(t.h2,{id:"comparison-with-apollo-studio",children:"Comparison with Apollo Studio"}),"\n",(0,o.jsxs)(t.p,{children:["While ",(0,o.jsx)(t.a,{href:"/docs/guides/apollo-studio",children:"Apollo studio"})," telemetry also provides analytics tools for your schema but when choosing between it and OpenTelemetry integration consider next points:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"OpenTelemetry is more generalized observability framework that could be used for cross-service analytics while Apollo Studio can provide insights related purely to graphQL"}),"\n",(0,o.jsx)(t.li,{children:"OpenTelemetry is vendor-agnostic and therefore you could actually use different observability platforms depending on your needs and don't rely on single tool like Apollo Studio"}),"\n",(0,o.jsx)(t.li,{children:"OpenTelemetry integration in Tailcall can provide more analytical data that is out of scope of graphQL analytics provided by Apollo Studio"}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(t.p,{children:"Consider we have following Tailcall config that connects with jsonplaceholder.com to fetch the data about user and posts"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-graphql",children:'schema\n  @server(port: 8000, graphiql: true, hostname: "0.0.0.0")\n  @upstream(\n    baseURL: "http://jsonplaceholder.typicode.com"\n  ) {\n  query: Query\n}\n\ntype Query {\n  posts: [Post] @http(path: "/posts") @cache(maxAge: 3000)\n  user(id: Int!): User @http(path: "/users/{{args.id}}")\n}\n\ntype User {\n  id: Int!\n  name: String!\n  username: String!\n  email: String!\n  phone: String\n  website: String\n}\n\ntype Post {\n  id: Int!\n  userId: Int!\n  title: String!\n  body: String!\n  user: User @http(path: "/users/{{value.userId}}")\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"We will update that config with telemetry integration in following sections."}),"\n",(0,o.jsx)(t.h2,{id:"tailcall-config",children:"Tailcall config"}),"\n",(0,o.jsx)(t.p,{children:"By default, telemetry data is not generated by Tailcall since it requires some setup to know where to send this data and also that affects performance of server that could be undesirable in some cases."}),"\n",(0,o.jsxs)(t.p,{children:["Telemetry configuration is provided by ",(0,o.jsx)(t.a,{href:"/docs/operators/telemetry",children:(0,o.jsx)(t.code,{children:"@telemetry"})})," directive to setup how and where the telemetry data is send."]}),"\n",(0,o.jsx)(t.p,{children:"To enable it we can update our config with something like config below:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-graphql",children:'schema\n  @telemetry(\n    export: {\n      otlp: {url: "http://your-otlp-compatible-backend.com"}\n    }\n  ) {\n  query: Query\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Here, ",(0,o.jsx)(t.code,{children:"export"})," specifies the format of generated data and endpoint to which to send that data. Continue reading to know more about different options for it."]}),"\n",(0,o.jsx)(t.h3,{id:"export-to-otlp",children:"Export to OTLP"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://opentelemetry.io/docs/specs/otlp/",children:"OTLP"})," is a vendor agnostic protocol that is supported by growing ",(0,o.jsx)(t.a,{href:"https://opentelemetry.io/ecosystem/vendors/",children:"number of observability backends"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"opentelemetry-collector",children:"OpenTelemetry Collector"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://opentelemetry.io/docs/collector/",children:"OpenTelemetry Collector"})," is a vendor-agnostic way to receive, process and export telemetry data in OTLP format."]}),"\n",(0,o.jsx)(t.p,{children:"Although, tailcall can send the data directly to the backends that supports OTLP format using Otel Collector could be valuable choice since it's more robust solution well-suited for a high-scale, more flexible settings and ability to export in different formats other than OTLP."}),"\n",(0,o.jsxs)(t.p,{children:["In summary, if you're gonna to use OTLP compatible platform or ",(0,o.jsx)(t.a,{href:"#export-to-prometheus",children:"prometheus"})," and your load is not that massive you could send the data directly to platforms. From the other side, if you need to export to different formats (like Jaeger or Datadog) or your application involves high load consider using Otel Collector as an export target."]}),"\n",(0,o.jsx)(t.h3,{id:"export-to-prometheus",children:"Export to prometheus"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://prometheus.io",children:"Prometheus"})," is a metric monitoring solution. Please note that prometheus works purely with metrics and other telemetry data like traces and logs won't be sent to it."]}),"\n",(0,o.jsx)(t.p,{children:"Prometheus integration works by adding a special route for tailcall server router that outputs generated metrics in prometheus format consumable by prometheus scraper."}),"\n",(0,o.jsx)(t.h2,{id:"data-generated",children:"Data generated"}),"\n",(0,o.jsxs)(t.p,{children:["You can find a reference of type of info generated by Tailcall in the ",(0,o.jsxs)(t.a,{href:"/docs/operators/telemetry",children:[(0,o.jsx)(t.code,{children:"@telemetry"})," reference"]})," or consult ",(0,o.jsx)(t.a,{href:"#integration-examples",children:"examples"})," in order to gain some understanding."]}),"\n",(0,o.jsx)(t.h3,{id:"relation-with-other-services",children:"Relation with other services"}),"\n",(0,o.jsxs)(t.p,{children:["Tailcall fully supports ",(0,o.jsx)(t.a,{href:"https://opentelemetry.io/docs/concepts/context-propagation/",children:"Context Propagation"})," functionality and therefore you can analyze distributed traces across all of your services that are provides telemetry data."]}),"\n",(0,o.jsx)(t.p,{children:"That may look like this:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"honeycomb-propagation",src:n(4019).Z+"",width:"2126",height:"1212"})}),"\n",(0,o.jsx)(t.p,{children:"Where Tailcall is a part of whole distributed trace"}),"\n",(0,o.jsx)(t.h3,{id:"customize-generated-data",children:"Customize generated data"}),"\n",(0,o.jsxs)(t.p,{children:["In some cases you may want to customize the data that were added to telemetry payload to have more control over analyzing process. Tailcall supports that customization for specific use cases described below. For eg. the metric ",(0,o.jsx)(t.a,{href:"/docs/operators/telemetry#metrics",children:(0,o.jsx)(t.code,{children:"http.server.request.count"})})," can be customized with the ",(0,o.jsx)(t.a,{href:"/docs/operators/telemetry#requestheaders",children:(0,o.jsx)(t.code,{children:"requestHeaders"})})," property to allow splitting the overall count by specific headers."]}),"\n",(0,o.jsx)(t.admonition,{type:"important",children:(0,o.jsx)(t.p,{children:"The value of specified headers will be sent to telemetry backend as is, so use it with care to prevent of leaking any sensitive data to third-party services you don't have control over."})}),"\n",(0,o.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(t.p,{children:"Here are some examples of how you can integrate Tailcall with some common open-telemetry backends."}),"\n",(0,o.jsx)(t.h3,{id:"honeycombio",children:"Honeycomb.io"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["Go to ",(0,o.jsx)(t.a,{href:"https://www.honeycomb.io",children:"honeycomb.io"})]}),"\n",(0,o.jsx)(t.li,{children:"Login to your account"}),"\n",(0,o.jsxs)(t.li,{children:["Go to ",(0,o.jsx)(t.code,{children:"Account -> Team Settings -> Environments and API Keys -> Configuration"})," and create new or copy existing api key"]}),"\n",(0,o.jsxs)(t.li,{children:["Go to tailcall config and update settings:","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-graphql",children:'schema\n  @telemetry(\n    export: {\n      otlp: {\n        url: "https://api.honeycomb.io:443"\n        headers: [\n          {\n            key: "x-honeycomb-team"\n            value: "{{env.HONEYCOMB_API_KEY}}"\n          }\n          {\n            key: "x-honeycomb-dataset"\n            value: "<your-dataset>"\n          }\n        ]\n      }\n    }\n  ) {\n  query: Query\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["Set the api key you've copied before to the environment variable named ",(0,o.jsx)(t.code,{children:"HONEYCOMB_API_KEY"})," and start tailcall with updated config"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Now make some requests to running service and wait a little bit until honeycomb proceeds the data. After that you can go to ",(0,o.jsx)(t.code,{children:"Home -> Total traces"})," and click on the trace with name ",(0,o.jsx)(t.code,{children:"request"}),". Now choose ",(0,o.jsx)(t.code,{children:"Traces"})," in the bottom and click on the first trace from the list. You should see the picture similar to this:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"trace view",src:n(6034).Z+"",width:"2099",height:"1212"})}),"\n",(0,o.jsx)(t.p,{children:"Here you can see data about the request that was made to tailcall and what actions were made to handle this request."}),"\n",(0,o.jsxs)(t.p,{children:["To see metrics now go ",(0,o.jsx)(t.code,{children:"Query"})," and run a query to fetch the data about metrics. You can use following screenshot as an example:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"metrics view",src:n(9627).Z+"",width:"2103",height:"1211"})}),"\n",(0,o.jsx)(t.h3,{id:"new-relic",children:"New Relic"}),"\n",(0,o.jsxs)(t.p,{children:["The guide is based on ",(0,o.jsx)(t.a,{href:"https://docs.newrelic.com/docs/more-integrations/open-source-telemetry-integrations/opentelemetry/get-started/opentelemetry-set-up-your-app/",children:"official doc"})]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["Go to ",(0,o.jsx)(t.a,{href:"https://newrelic.com",children:"newrelic.com"})]}),"\n",(0,o.jsx)(t.li,{children:"Login to your account"}),"\n",(0,o.jsxs)(t.li,{children:["Go to ",(0,o.jsx)(t.code,{children:"<your user name> -> Api Keys"})," and copy license value for key with access to write data"]}),"\n",(0,o.jsxs)(t.li,{children:["Go to tailcall config and update it with:","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-graphql",children:'schema\n  @telemetry(\n    export: {\n      otlp: {\n        url: "https://otlp.nr-data.net:4317"\n        headers: [\n          {\n            key: "api-key"\n            value: "{{env.NEWRELIC_API_KEY}}"\n          }\n        ]\n      }\n    }\n  ) {\n  query: Query\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["Set the api key you've copied before to the environment variable named ",(0,o.jsx)(t.code,{children:"NEWRELIC_API_KEY"})," and start tailcall with updated config"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Now make some requests to running service and wait a little bit until New Relic proceeds the data. After that you can go to ",(0,o.jsx)(t.code,{children:"Traces"})," locate ",(0,o.jsx)(t.code,{children:"request"})," trace, click on it, then pick one of the available traces and click on it. You should see something like the screenshot below:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"newrelic-trace",src:n(7050).Z+"",width:"2104",height:"1250"})}),"\n",(0,o.jsxs)(t.p,{children:["To see metrics now go to ",(0,o.jsx)(t.code,{children:"APM & Services -> Metrics Explorer"})," and choose the metrics you want to see like on example below."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"newrelic-metrics",src:n(5596).Z+"",width:"2104",height:"1250"})}),"\n",(0,o.jsx)(t.h3,{id:"datadog",children:"Datadog"}),"\n",(0,o.jsxs)(t.p,{children:["This guide is based on the ",(0,o.jsx)(t.a,{href:"https://docs.datadoghq.com/getting_started/opentelemetry/?s=header#exploring-observability-data-in-datadog",children:"official doc"}),"."]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["Go to ",(0,o.jsx)(t.a,{href:"https://www.datadoghq.com",children:"datadoghq.com"})]}),"\n",(0,o.jsx)(t.li,{children:"Login to your account (make sure you choose right region for your account on login)"}),"\n",(0,o.jsxs)(t.li,{children:["Go to ",(0,o.jsx)(t.code,{children:"Organization Settings -> API Keys"})," and copy the value of existing key or create a new one"]}),"\n",(0,o.jsxs)(t.li,{children:["Integration with datadog requires ",(0,o.jsx)(t.a,{href:"#opentelemetry-collector",children:"OpenTelemetry Collector"})," to be able to send data to. As an example we can use following config for the collector:","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yml",children:'receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\nexporters:\n  logging:\n    verbosity: detailed\n  datadog:\n    traces:\n      span_name_as_resource_name: true\n    hostname: "otelcol"\n    api:\n      key: ${DATADOG_API_KEY}\n      # make sure to specify right datadog site based on\n      # https://docs.datadoghq.com/getting_started/site/\n      site: us5.datadoghq.com\nprocessors:\n  batch:\n  datadog/processor:\n  probabilistic_sampler:\n    sampling_percentage: 30\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch, datadog/processor]\n      exporters: [datadog]\n    metrics:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [datadog]\n    logs:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [datadog]\n'})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["Go to your tailcall config and update it to:","\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-graphql",children:'schema\n  @telemetry(\n    export: {otlp: {url: "http://localhost:4317"}}\n  ) {\n  query: Query\n}\n'})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.ol,{start:"5",children:["\n",(0,o.jsxs)(t.li,{children:["Set the api key you've copied before to the environment variable named ",(0,o.jsx)(t.code,{children:"DATADOG_API_KEY"})," and start Otel collector and tailcall with updated config"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Now make some requests to running service and wait a little bit until Datadog proceeds the data. After that you can go to ",(0,o.jsx)(t.code,{children:"APM -> Traces"}),", locate the span with name ",(0,o.jsx)(t.code,{children:"request"})," and click on it. You should see something like on screenshot below:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"datadog-trace",src:n(4766).Z+"",width:"2099",height:"1248"})}),"\n",(0,o.jsxs)(t.p,{children:["To see metrics now go to ",(0,o.jsx)(t.code,{children:"Metrics -> Explorer"})," and search for metric you want to see. After updating the query you should see something like on example below:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"datadog-metrics",src:n(4213).Z+"",width:"2097",height:"1245"})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4213:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/datadog-metrics-c5e6d846d5f879ebadbc0e5ce11ef7cc.png"},4766:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/datadog-trace-2d30365db28b40beb8527c5e0e1a6612.png"},9627:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/honeycomb-metrics-134082a057a0388e391fe0c6f4e5cd37.png"},4019:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/honeycomb-propagation-bcfb054f75c12d3638692c1974d321de.png"},6034:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/honeycomb-trace-cd9cec851a91c0a633bb18cf06bcfaaf.png"},5596:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/newrelic-metrics-303d823cc035464b278975a369dab44f.png"},7050:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/newrelic-trace-4016231cd7ed67c0756606dcbc4cd1da.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>a});var o=n(7294);const i={},r=o.createContext(i);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1824],{7154:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});var n=t(5893),r=t(1151);const o={title:"@modify"},d=void 0,s={id:"directives/modify",title:"@modify",description:"The @modify directive in GraphQL provides the flexibility to alter the attributes of a field or a node within your GraphQL schema. Here's how you can use this directive:",source:"@site/docs/directives/modify.md",sourceDirName:"directives",slug:"/directives/modify",permalink:"/docs/directives/modify",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/directives/modify.md",tags:[],version:"current",frontMatter:{title:"@modify"},sidebar:"tutorialSidebar",previous:{title:"@link",permalink:"/docs/directives/link"},next:{title:"@omit",permalink:"/docs/directives/omit"}},c={},a=[{value:"name",id:"name",level:2},{value:"omit",id:"omit",level:2}];function l(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"@modify"})," directive in GraphQL provides the flexibility to alter the attributes of a field or a node within your GraphQL schema. Here's how you can use this directive:"]}),"\n",(0,n.jsx)(i.h2,{id:"name",children:"name"}),"\n",(0,n.jsxs)(i.p,{children:["You can rename a field or a node in your GraphQL schema using the ",(0,n.jsx)(i.code,{children:"name"})," argument in the ",(0,n.jsx)(i.code,{children:"@modify"})," directive. This can be helpful when the field name in your underlying data source doesn't match the desired field name in your schema. For instance:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-graphql",metastring:"showLineNumbers",children:'type User {\n  id: Int! @modify(name: "userId")\n}\n'})}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:'@modify(name: "userId")'})," informs GraphQL to present the field known as ",(0,n.jsx)(i.code,{children:"id"})," in the underlying data source as ",(0,n.jsx)(i.code,{children:"userId"})," in your schema."]}),"\n",(0,n.jsx)(i.h2,{id:"omit",children:"omit"}),"\n",(0,n.jsxs)(i.p,{children:["You can exclude a field or a node from your GraphQL schema using the ",(0,n.jsx)(i.code,{children:"omit"})," argument in the ",(0,n.jsx)(i.code,{children:"@modify"})," directive. This can be useful if you want to keep certain data hidden from the client. For instance:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-graphql",metastring:"showLineNumbers",children:"type User {\n  id: Int! @modify(omit: true)\n}\n"})}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"@modify(omit: true)"})," instructs GraphQL to exclude the ",(0,n.jsx)(i.code,{children:"id"})," field from the schema, making it inaccessible to the client."]}),"\n",(0,n.jsx)(i.admonition,{type:"tip",children:(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"@omit"})," is a standalone directive and is an alias/shorthand for ",(0,n.jsx)(i.code,{children:"modify(omit: true)"})," checkout ",(0,n.jsx)(i.a,{href:"/docs/directives/omit",children:"documentation"})]})})]})}function h(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,i,t)=>{t.d(i,{Z:()=>s,a:()=>d});var n=t(7294);const r={},o=n.createContext(r);function d(e){const i=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(o.Provider,{value:i},e.children)}}}]);
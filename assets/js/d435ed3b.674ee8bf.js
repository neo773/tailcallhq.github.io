"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5501],{8985:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var t=i(5893),o=i(1151);const a={title:"Conclusion",sidebar_position:7,description:"Learn how Tailcall can help you address the N + 1 problem in GraphQL applications. Discover the significance of introspection, deduplication, and batch APIs in optimizing performance and reducing server requests. Enhance your understanding of N + 1 issues on GraphQL and ensure scalable, high-performance web applications by mastering techniques to mitigate the N + 1 problem and improve server load."},r=void 0,s={id:"n+1/conclusion",title:"Conclusion",description:"Learn how Tailcall can help you address the N + 1 problem in GraphQL applications. Discover the significance of introspection, deduplication, and batch APIs in optimizing performance and reducing server requests. Enhance your understanding of N + 1 issues on GraphQL and ensure scalable, high-performance web applications by mastering techniques to mitigate the N + 1 problem and improve server load.",source:"@site/docs/n+1/conclusion.md",sourceDirName:"n+1",slug:"/n+1/conclusion",permalink:"/docs/n+1/conclusion",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/n+1/conclusion.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Conclusion",sidebar_position:7,description:"Learn how Tailcall can help you address the N + 1 problem in GraphQL applications. Discover the significance of introspection, deduplication, and batch APIs in optimizing performance and reducing server requests. Enhance your understanding of N + 1 issues on GraphQL and ensure scalable, high-performance web applications by mastering techniques to mitigate the N + 1 problem and improve server load."},sidebar:"tutorialSidebar",previous:{title:"Batch APIs",permalink:"/docs/n+1/batching"},next:{title:"Introduction",permalink:"/docs/telemetry"}},c={},l=[];function p(e){const n={code:"code",p:"p",...(0,o.a)(),...e.components};return(0,t.jsxs)(n.p,{children:["To summarize, we learnt that N + 1 is a general problem and not specific to GraphQL. It's a hard problem to identify, and developers often resort to runtime analysis to find such scenarios. N + 1 can really strain your infrastructure, leading to serious downtime in certain cases. We also learnt that in Tailcall, the CLI can introspect your configuration and identify all the potential N + 1 issues upfront. Using ",(0,t.jsx)(n.code,{children:"dedupe"}),", you can improve the N + 1 problem significantly, however, it's not a complete solution. To completely eliminate the N + 1 problem, you can configure Tailcall to leverage Batch APIs. Hopefully, this guide underscores the effectiveness of Tailcall in addressing the N + 1 problem."]})}function d(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>s,a:()=>r});var t=i(7294);const o={},a=t.createContext(o);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);
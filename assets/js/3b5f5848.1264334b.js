"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7454],{478:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=n(4848),i=n(8453);const r={title:"Comprehensive Testing Guides for Tailcall",sidebar_label:"Unit Testing",description:"Access comprehensive testing guides for developers using Tailcall. Ensure your APIs are robust and reliable with our best practices."},o=void 0,l={id:"testing",title:"Comprehensive Testing Guides for Tailcall",description:"Access comprehensive testing guides for developers using Tailcall. Ensure your APIs are robust and reliable with our best practices.",source:"@site/developers/testing.md",sourceDirName:".",slug:"/testing",permalink:"/developers/testing",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Comprehensive Testing Guides for Tailcall",sidebar_label:"Unit Testing",description:"Access comprehensive testing guides for developers using Tailcall. Ensure your APIs are robust and reliable with our best practices."},sidebar:"tutorialSidebar",previous:{title:"Telemetry",permalink:"/developers/telemetry"},next:{title:"Macro Benchmarks",permalink:"/developers/wrk-benchmark"}},a={},c=[{value:"Running Tests",id:"running-tests",level:2},{value:"Filtering Running Tests",id:"filtering-running-tests",level:3},{value:"Writing Tests",id:"writing-tests",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Naming Conventions",id:"naming-conventions",level:2},{value:"What to Test",id:"what-to-test",level:2},{value:"Troubleshooting Common Issues",id:"troubleshooting-common-issues",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Head:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n,{children:(0,t.jsx)("title",{children:"Guide to Unit Testing For Developers | Tailcall"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Tailcall"})," employs a thorough testing methodology to verify functionality and ensure that future modifications do not compromise existing features. We promote test-driven development (TDD) where feasible."]}),"\n",(0,t.jsx)(s.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,t.jsx)(s.p,{children:"To execute tests locally on your machine, follow these steps:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Ensure the Rust toolchain is installed on your machine."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Execute all tests with the following command in the terminal:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sh",children:"cargo test\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"To run a specific test or group of tests, modify the command accordingly:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sh",children:"cargo test test_name\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"To view all output from tests (useful if you have added debug logs to your tests), use the command:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sh",children:"cargo test -- --show-output\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["For more details and options on how tests function, please refer to the ",(0,t.jsx)(s.a,{href:"https://doc.rust-lang.org/book/ch11-00-testing.html",children:"Rust Book Testing Chapter"})," and the ",(0,t.jsx)(s.a,{href:"https://doc.rust-lang.org/rustc/tests/index.html",children:"rustc tests guide"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"filtering-running-tests",children:"Filtering Running Tests"}),"\n",(0,t.jsx)(s.p,{children:"To execute a specific set of tests or exclude some tests, use the following commands:"}),"\n",(0,t.jsx)(s.p,{children:"To run tests that match a certain pattern:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sh",children:"cargo test test_pattern\n# e.g., to run grpc related tests:\ncargo test grpc\n"})}),"\n",(0,t.jsx)(s.p,{children:"To run a specific test by passing the full module path:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sh",children:"cargo test -- --exact test_name\n# e.g., for grpc protobuf conversion:\ncargo test -- --exact grpc::protobuf::tests::convert_value\n"})}),"\n",(0,t.jsx)(s.p,{children:"To skip certain tests:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sh",children:"cargo test -- --skip test_pattern\n# e.g., to ignore grpc related tests:\ncargo test -- --skip grpc\n"})}),"\n",(0,t.jsxs)(s.p,{children:["For more available options, please refer to ",(0,t.jsx)(s.a,{href:"https://doc.rust-lang.org/rustc/tests/index.html#filters",children:"rustc filter's documentation"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,t.jsx)(s.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,t.jsx)(s.p,{children:"Unit tests should focus on individual components, ensuring each functions as expected:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Place unit tests in the same file as your code, under a ",(0,t.jsx)(s.code,{children:"#[cfg(test)]"})," module."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Use descriptive function names for your tests, for eg:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-rust",children:"#[cfg(test)]\nmod tests {\n   #[test]\n   fn test_addition() {\n      assert_eq!(2 + 2, 4);\n   }\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"For every new feature or bug fix, structure your tests as follows:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Set up the value using helper methods in tests."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Compare an actual and an expected value."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Assert the two values on separate lines."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Ensure there is one assertion per test."}),"\n",(0,t.jsx)(s.p,{children:"For eg:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-rust",children:"use pretty_assertions::assert_eq;\nfn test_something_important() {\n   // Setup\n   let value = setup_something_using_a_function();\n\n   // Compute Actual\n   let actual = perform_some_operation_on_the_value(value);\n\n   // Compute Expected\n   let expected = ExpectedValue {foo: 1, bar: 2};\n\n   // Compare Actual and Expected\n   assert_eq!(actual, expected);\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"Before submitting a pull request, verify all tests pass."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,t.jsxs)(s.p,{children:["Integration testing is conducted using our ",(0,t.jsx)(s.a,{href:"/developers/integration-testing",children:"markdown-based DSL"}),". Please refer to its own documentation for detailed information."]}),"\n",(0,t.jsx)(s.h2,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Test functions should begin with ",(0,t.jsx)(s.code,{children:"test_"})," followed by a description of their purpose."]}),"\n",(0,t.jsx)(s.li,{children:"Use underscores to separate words in the test function names for readability."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"what-to-test",children:"What to Test"}),"\n",(0,t.jsx)(s.p,{children:"In essence, test everything! Write unit tests for modules that can be tested independently and supplement them with integration tests to ensure the overall system stability."}),"\n",(0,t.jsx)(s.h2,{id:"troubleshooting-common-issues",children:"Troubleshooting Common Issues"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Ensure your branch is up-to-date with the latest commits from the main branch."}),"\n",(0,t.jsx)(s.li,{children:"Verify that your environment conforms to the required configurations (e.g., versions of Rust and dependencies)."}),"\n",(0,t.jsx)(s.li,{children:"Confirm that test failures are not caused by your changes (e.g., run tests with a clean build on the main branch)."}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7592],{4194:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var t=s(5893),i=s(1151);const r={title:"Test Guidelines",description:"This guide details Tailcall's Markdown-based snapshot testing framework, explaining its structure, syntax, and testing process. It is designed for developers implementing or optimizing tests in a language-agnostic environment, emphasizing efficient snapshot utilization and maintenance within Tailcall.",sidebar_position:3},l=void 0,c={id:"contributors/tests",title:"Test Guidelines",description:"This guide details Tailcall's Markdown-based snapshot testing framework, explaining its structure, syntax, and testing process. It is designed for developers implementing or optimizing tests in a language-agnostic environment, emphasizing efficient snapshot utilization and maintenance within Tailcall.",source:"@site/docs/contributors/tests.mdx",sourceDirName:"contributors",slug:"/contributors/tests",permalink:"/docs/contributors/tests",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/contributors/tests.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Test Guidelines",description:"This guide details Tailcall's Markdown-based snapshot testing framework, explaining its structure, syntax, and testing process. It is designed for developers implementing or optimizing tests in a language-agnostic environment, emphasizing efficient snapshot utilization and maintenance within Tailcall.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Bounty",permalink:"/docs/contributors/bounty"}},o={},a=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Why a new testing framework?",id:"why-a-new-testing-framework",level:2},{value:"How does it work?",id:"how-does-it-work",level:2},{value:"Structure",id:"structure",level:2},{value:"Test syntax",id:"test-syntax",level:2},{value:"Header",id:"header",level:3},{value:"Annotation",id:"annotation",level:3},{value:"Blocks",id:"blocks",level:3},{value:"<code>@server:</code>",id:"server",level:4},{value:"<code>@mock:</code>",id:"mock",level:4},{value:"<code>@env:</code>",id:"env",level:4},{value:"<code>@test:</code>",id:"test",level:4},{value:"<code>@file:&lt;filename&gt;</code>",id:"filefilename",level:4},{value:"Instruction",id:"instruction",level:3},{value:"Test process",id:"test-process",level:2},{value:"Snapshots",id:"snapshots",level:2},{value:"Maintenance",id:"maintenance",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["A Markdown-based snapshot testing framework in ",(0,t.jsx)(n.strong,{children:"Tailcall"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#why-a-new-testing-framework",children:"Why a new testing framework?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#how-does-it-work",children:"How does it work?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#structure",children:"Structure"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#test-syntax",children:"Test syntax"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#header",children:"Header"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#annotation",children:"Annotation"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"#blocks",children:"Blocks"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#server",children:(0,t.jsx)(n.code,{children:"@server"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#mock",children:(0,t.jsx)(n.code,{children:"@mock"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#env",children:(0,t.jsx)(n.code,{children:"@env"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#test",children:(0,t.jsx)(n.code,{children:"@test"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#filefilename",children:(0,t.jsx)(n.code,{children:"@file:<filename>"})})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#instruction",children:"Instruction"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#test-process",children:"Test process"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#snapshots",children:"Snapshots"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#maintenance",children:"Maintenance"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"why-a-new-testing-framework",children:"Why a new testing framework?"}),"\n",(0,t.jsx)(n.p,{children:"We aimed to create a snapshot testing framework that is language-agnostic, straightforward to write, maintain, and understand. For this reason, we chose a Markdown-based design. This design closely aligns with the usage patterns of Tailcall users. Since Tailcall supports building scalable GraphQL backends without being tied to a specific programming language, it was essential for our testing framework to be similarly language-agnostic."}),"\n",(0,t.jsx)(n.h2,{id:"how-does-it-work",children:"How does it work?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/tailcallhq/tailcall/blob/main/tests/execution_spec.rs",children:"execution_spec"})," implements a Markdown-based snapshot testing framework for Tailcall. The framework is designed to test the execution of Tailcall configs, and it is based on the following architecture:\n",(0,t.jsx)(n.img,{alt:"Test Architecture",src:s(4754).Z+"",width:"1920",height:"1080"})]}),"\n",(0,t.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,t.jsxs)(n.p,{children:["All ",(0,t.jsx)(n.code,{children:"execution_spec"})," tests are located in ",(0,t.jsx)(n.code,{children:"tests/execution/"}),". The results generated by these tests are stored as snapshots in ",(0,t.jsx)(n.code,{children:"tests/snapshots/"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"test-syntax",children:"Test syntax"}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.code,{children:"execution_spec"})," test is always a Markdown file with a ",(0,t.jsx)(n.code,{children:".md"})," extension. These files contain the following parts:"]}),"\n",(0,t.jsx)(n.h3,{id:"header",children:"Header"}),"\n",(0,t.jsxs)(n.p,{children:["A level 1 heading (",(0,t.jsx)(n.code,{children:"#"}),") specifying the name of the test, and an optional paragraph after it specifying a description. There must be precisely one header in a test."]}),"\n",(0,t.jsx)(n.p,{children:"Examples:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:"# Simple test\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:"# Complex test\n\nThis is a description.\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"annotation",children:"Annotation"}),"\n",(0,t.jsxs)(n.p,{children:["A level 5 heading (",(0,t.jsx)(n.code,{children:"#####"}),"), with the text being one of the following:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"##### only"})," -- If at least one test has the ",(0,t.jsx)(n.code,{children:"only"})," annotation, the runner will run this/these test(s)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"##### skip"})," -- If a test has the ",(0,t.jsx)(n.code,{children:"skip"})," annotation, the runner will not run that test."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These are typically added to tests temporarily, so try not to commit tests with annotations. There must be either zero or one annotations in a test."}),"\n",(0,t.jsx)(n.h3,{id:"blocks",children:"Blocks"}),"\n",(0,t.jsxs)(n.p,{children:["Blocks are specified along with the codeblocks next to the format of the codeblock (",(0,t.jsx)(n.code,{children:"@"}),") followed by the block type, and a code block after them. Blocks supply the runner with data, and the runner determines what to do based on the available blocks. example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:"\x3c!-- highlight-next-line --\x3e\n\n```graphql @server\nschema {\n  query: Query\n}\n```\n"})}),"\n",(0,t.jsx)(n.h4,{id:"server",children:(0,t.jsx)(n.code,{children:"@server:"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"@server"})," block lets you specify a server SDL config. These are expected to be parseable to have a passing test, unless the ",(0,t.jsxs)(n.a,{href:"#instruction",children:[(0,t.jsx)(n.code,{children:"SDL error"})," instruction"]})," is specified, which requires the config parsing to throw an error. There must be at least one ",(0,t.jsx)(n.code,{children:"@server"})," block in a test."]}),"\n",(0,t.jsxs)(n.p,{children:["Every test should have at least one ",(0,t.jsx)(n.code,{children:"@server"})," block. Some blocks (for example, ",(0,t.jsx)(n.code,{children:"@test"}),") require precisely one ",(0,t.jsx)(n.code,{children:"@server"})," block. Moreover, having precisely one ",(0,t.jsx)(n.code,{children:"@server"})," block in a test ensures that the ",(0,t.jsx)(n.code,{children:"client"})," check will also be performed."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"merge"})," check is always performed using every defined server block."]}),"\n",(0,t.jsxs)(n.p,{children:["When the ",(0,t.jsxs)(n.a,{href:"#instruction",children:[(0,t.jsx)(n.code,{children:"check identity"})," instruction"]})," is specified, the runner will attempt to perform an ",(0,t.jsx)(n.code,{children:"identity"}),' check, but since is a "dumb", plain-text check, it requires the ',(0,t.jsx)(n.code,{children:"server"})," block's code to be written in a specific way."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:'\x3c!-- highlight-next-line --\x3e\n\n```graphql @server\nschema {\n  query: Query\n}\n\ntype User {\n  id: Int\n  name: String\n}\n\ntype Query {\n  user: User @http(path: "/users/1", baseURL: "http://jsonplaceholder.typicode.com")\n}\n```\n'})}),"\n",(0,t.jsx)(n.h4,{id:"mock",children:(0,t.jsx)(n.code,{children:"@mock:"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"@mock"})," block specifies mocked HTTP endpoints in ",(0,t.jsx)(n.code,{children:"YAML"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["An item of ",(0,t.jsx)(n.code,{children:"mock"})," contains a ",(0,t.jsx)(n.code,{children:"request"})," and a ",(0,t.jsx)(n.code,{children:"response"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["There may be at most one ",(0,t.jsx)(n.code,{children:"mock"})," block in a test."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:"\x3c!-- highlight-next-line --\x3e\n\n```graphql @mock\n- request:\n    method: GET\n    url: http://jsonplaceholder.typicode.com/users/1\n  response:\n    status: 200\n    body:\n      id: 1\n      name: foo\n```\n"})}),"\n",(0,t.jsx)(n.h4,{id:"env",children:(0,t.jsx)(n.code,{children:"@env:"})}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.code,{children:"@env"})," block specifies environment variables in ",(0,t.jsx)(n.code,{children:"YAML"})," that the runner should use in the app context."]}),"\n",(0,t.jsxs)(n.p,{children:["There may be at most one ",(0,t.jsx)(n.code,{children:"@env"})," block in a test."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:"\x3c!-- highlight-next-line --\x3e\n\n```yml @env\nTEST_ID: 1\n```\n"})}),"\n",(0,t.jsx)(n.h4,{id:"test",children:(0,t.jsx)(n.code,{children:"@test:"})}),"\n",(0,t.jsxs)(n.p,{children:["An ",(0,t.jsx)(n.code,{children:"@test"})," block specifies HTTP requests that the runner should perform in ",(0,t.jsx)(n.code,{children:"YAML"}),".\nIt solely contains requests. The response for each request is stored in an ",(0,t.jsx)(n.code,{children:"test_{i}"})," snapshot."]}),"\n",(0,t.jsxs)(n.p,{children:["There may be at most one ",(0,t.jsx)(n.code,{children:"@test"})," block in a test."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:"\x3c!-- highlight-next-line --\x3e\n\n```graphql @test\n- method: POST\n  url: http://localhost:8080/graphql\n  body:\n    query: query { user { name } }\n```\n"})}),"\n",(0,t.jsx)(n.h4,{id:"filefilename",children:(0,t.jsx)(n.code,{children:"@file:<filename>"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"@file"})," block creates a file in the spec's virtual file system. The ",(0,t.jsxs)(n.a,{href:"#server",children:[(0,t.jsx)(n.code,{children:"@server"})," block"]})," will have exclusive access to files created in this way: the true filesystem is not available to it."]}),"\n",(0,t.jsxs)(n.p,{children:["Every ",(0,t.jsx)(n.code,{children:"@file"})," block has the filename declared in the header. The language of the code block is optional and does not matter."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:'\x3c!-- highlight-next-line --\x3e\n\n```graphql @file:enum.graphql\nschema @server(port: 8080) @upstream(baseURL: "http://jsonplaceholder.typicode.com") {\n  query: Query\n}\n\nenum Foo {\n  BAR\n  BAZ\n}\n\ntype Query {\n  foo: Foo @http(path: "/foo")\n}\n```\n'})}),"\n",(0,t.jsx)(n.h3,{id:"instruction",children:"Instruction"}),"\n",(0,t.jsxs)(n.p,{children:["A header (",(0,t.jsx)(n.code,{children:"---"}),"), followed by an instruction:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:"---\nexpect_validation_error: true\n---\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This instructs the runner to expect a failure when parsing the ",(0,t.jsx)(n.code,{children:"server"})," block and to compare the result with an ",(0,t.jsx)(n.code,{children:"errors"})," snapshot. This is used when testing for error handling."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-md",children:"---\ncheck_identity: true\n---\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This instructs the runner to run identity checks on ",(0,t.jsx)(n.code,{children:"server"})," blocks. While it would be good to run this on every test, the code of ",(0,t.jsx)(n.code,{children:"server"})," blocks must be written with this instruction mind, therefore it is optional."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"There must be precisely zero or one instruction in a test."}),"\n",(0,t.jsx)(n.h2,{id:"test-process",children:"Test process"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The runner reads all tests, and selects the ones to run based on the following:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If a path to a test was given in the first command line argument, solely that test will run."}),"\n",(0,t.jsxs)(n.li,{children:["If one or more tests have an ",(0,t.jsxs)(n.a,{href:"#annotation",children:[(0,t.jsx)(n.code,{children:"only"})," annotation"]}),", those tests will run."]}),"\n",(0,t.jsxs)(n.li,{children:["If one or more tests have a ",(0,t.jsxs)(n.a,{href:"#annotation",children:[(0,t.jsx)(n.code,{children:"skip"})," annotation"]}),", every test except those will run."]}),"\n",(0,t.jsx)(n.li,{children:"If none of the above is true, all tests will run."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["The runner evaluates every test.","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["If the test has an ",(0,t.jsxs)(n.a,{href:"#instruction",children:[(0,t.jsx)(n.code,{children:"SDL error"})," instruction"]}),", the runner does the following:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Reads and parses the config, taking note of the validation errors."}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"If no validation errors occurred, the runner throws an error."})," (",(0,t.jsx)(n.code,{children:"SDL error"})," is a requirement, not a try-catch.)"]}),"\n",(0,t.jsxs)(n.li,{children:["Compares the encountered errors to the ",(0,t.jsx)(n.code,{children:"errors"})," snapshot."]}),"\n",(0,t.jsx)(n.li,{children:"If the snapshot doesn't match the encountered errors, the runner generates a new snapshot and throws an error."}),"\n",(0,t.jsxs)(n.li,{children:["Ends the test run, and starts evaluating the next test. (All other actions would require a parseable ",(0,t.jsx)(n.code,{children:"@server"})," block.)"]}),"\n",(0,t.jsxs)(n.li,{children:["The runner parses every ",(0,t.jsx)(n.code,{children:"@server"})," block."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Parses the block and checks for errors."}),"\n",(0,t.jsxs)(n.li,{children:["If the test has a ",(0,t.jsxs)(n.a,{href:"#instruction",children:[(0,t.jsx)(n.code,{children:"check identity"})," instruction"]}),", the runner converts the parsed block to SDL again, and checks if the two strings are the same. If they're not, the runner throws an error."]}),"\n",(0,t.jsxs)(n.li,{children:["The runner performs a ",(0,t.jsx)(n.code,{children:"merge"})," check:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Attempts to merge all ",(0,t.jsxs)(n.a,{href:"#server",children:[(0,t.jsx)(n.code,{children:"@server"})," blocks"]}),", resulting in a merged config. (If there is a single ",(0,t.jsxs)(n.a,{href:"#server",children:[(0,t.jsx)(n.code,{children:"@server"})," block"]}),", the runner will merge it with the default config.)"]}),"\n",(0,t.jsxs)(n.li,{children:["Compares the merged config to the ",(0,t.jsx)(n.code,{children:"merged"})," snapshot."]}),"\n",(0,t.jsx)(n.li,{children:"If the snapshot doesn't match the merged config, the runner generates a new snapshot and throws an error."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["If there is precisely one ",(0,t.jsxs)(n.a,{href:"#server",children:[(0,t.jsx)(n.code,{children:"@server"})," block"]}),", the runner performs a ",(0,t.jsx)(n.code,{children:"client"})," check:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Generates the client schema of the ",(0,t.jsx)(n.code,{children:"server"})," block."]}),"\n",(0,t.jsxs)(n.li,{children:["Compares it to the ",(0,t.jsx)(n.code,{children:"client"})," SDL snapshot."]}),"\n",(0,t.jsx)(n.li,{children:"If the snapshot doesn't match the generated schema, the runner generates a new snapshot and throws an error."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["If the test has an ",(0,t.jsxs)(n.a,{href:"#test",children:[(0,t.jsx)(n.code,{children:"@test"})," block"]}),", the runner performs ",(0,t.jsx)(n.code,{children:"test"})," checks:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["If there is a ",(0,t.jsxs)(n.a,{href:"#mock",children:[(0,t.jsx)(n.code,{children:"@mock"})," block"]}),", the runner sets up the mock HTTP client based on it."]}),"\n",(0,t.jsxs)(n.li,{children:["If there is at least one ",(0,t.jsxs)(n.a,{href:"#filefilename",children:[(0,t.jsx)(n.code,{children:"@file"})," block"]}),", the runner sets up the mock filesystem based on them."]}),"\n",(0,t.jsxs)(n.li,{children:["If there is an ",(0,t.jsxs)(n.a,{href:"#env",children:[(0,t.jsx)(n.code,{children:"@env"})," block"]}),", the runner uses it for the app context."]}),"\n",(0,t.jsxs)(n.li,{children:["Creates an app context based on the ",(0,t.jsxs)(n.a,{href:"#server",children:[(0,t.jsx)(n.code,{children:"@server"})," block"]}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["For each test in the block (0-based index ",(0,t.jsx)(n.code,{children:"i"}),"), the runner does the following:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Runs the HTTP request on the app context."}),"\n",(0,t.jsxs)(n.li,{children:["Compares the HTTP response to the ",(0,t.jsx)(n.code,{children:"test_{i}"})," snapshot."]}),"\n",(0,t.jsx)(n.li,{children:"If the snapshot doesn't match the response, the runner generates a new snapshot and throws an error."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"snapshots",children:"Snapshots"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"execution_spec"})," uses the ",(0,t.jsx)(n.a,{href:"https://insta.rs",children:"Insta"})," snapshot engine. Snapshots are automatically generated with a ",(0,t.jsx)(n.code,{children:".new"})," suffix if there is no pre-existing snapshot, or if the compared data didn't match the existing snapshot."]}),"\n",(0,t.jsxs)(n.p,{children:["Instead of writing result cases in tests and updating them when behaviour changes, a snapshot-based testing workflow relies on auto-generation. Whenever a ",(0,t.jsx)(n.code,{children:".new"})," snapshot is generated, it means one of the following:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Your code made an unexpected breaking change, and you need to fix it."}),"\n",(0,t.jsx)(n.li,{children:"Your code made an expected breaking change, and you need to accept the new snapshot."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You need to determine which one is the case, and take action accordingly."}),"\n",(0,t.jsxs)(n.p,{children:["Usage of ",(0,t.jsx)(n.a,{href:"https://insta.rs/docs/cli/",children:"cargo-insta"})," is recommended:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cargo insta test --review\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will regenerate all snapshots without interrupting the test every time there's a diff, and it will also open the snapshot review interface, so that you can accept or reject ",(0,t.jsx)(n.code,{children:".new"})," snapshots."]}),"\n",(0,t.jsx)(n.h2,{id:"maintenance",children:"Maintenance"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["To clean unused snapshots, run ",(0,t.jsx)(n.code,{children:"cargo insta test --delete-unreferenced-snapshots"}),"."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},4754:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/test-arch-6d6afe033eb68830ab8b180b23c466ac.png"},1151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>l});var t=s(7294);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);